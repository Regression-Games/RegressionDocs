"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[4854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,g=u["".concat(d,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7628:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(7462),o=(n(7294),n(3905));const i={toc:[]},r="wrapper";function s(e){let{components:t,...s}=e;return(0,o.kt)(r,(0,a.Z)({},i,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Create new AI",src:n(7399).Z,width:"2942",height:"880"}),"\n",(0,o.kt)("img",{alt:"Select Creation Option",src:n(3135).Z,width:"1546",height:"986"})))}s.isMDXComponent=!0},7388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var a=n(7462),o=(n(7294),n(3905)),i=n(7628);const r={sidebar_label:"Using the Agent Builder"},s="Creating AIs Using the Agent Builder",d={unversionedId:"players/creating-bots/agent-builder",id:"players/creating-bots/agent-builder",title:"Creating AIs Using the Agent Builder",description:"Regression Games' Agent Builder is an easy-to-use visual editor for constructing AI behavior trees.",source:"@site/docs/players/creating-bots/agent-builder.mdx",sourceDirName:"players/creating-bots",slug:"/players/creating-bots/agent-builder",permalink:"/docs/players/creating-bots/agent-builder",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Using the Agent Builder"},sidebar:"playersSidebar",previous:{title:"Using the Blockly Editor",permalink:"/docs/players/creating-bots/blockly"},next:{title:"Development Requirements",permalink:"/docs/players/creating-bots/coding/dev-requirements"}},l={},c=[{value:"What Is a Behavior Tree?",id:"what-is-a-behavior-tree",level:2},{value:"Getting Started with Agent Builder",id:"getting-started-with-agent-builder",level:2},{value:"Loading Your Tree",id:"loading-your-tree",level:2},{value:"Adding Nodes",id:"adding-nodes",level:2},{value:"Adding Code",id:"adding-code",level:3},{value:"Validating Code",id:"validating-code",level:3},{value:"Saving Your Tree",id:"saving-your-tree",level:2},{value:"Editing an AI&#39;s source code",id:"editing-an-ais-source-code",level:2}],u={toc:c},p="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-ais-using-the-agent-builder"},"Creating AIs Using the Agent Builder"),(0,o.kt)("p",null,"Regression Games' Agent Builder is an easy-to-use visual editor for constructing AI behavior trees.\nOur editor utilizes large language models like ",(0,o.kt)("a",{parentName:"p",href:"https://openai.com/blog/chatgpt"},"OpenAI's GPT-4")," to write code for you.\nThis makes our Agent Builder an excellent tool for those new to our AI libraries, or even to programming itself!"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This tool is early in development - it is prone to change and may contain bugs.\nPlease report issues and feature requests for the Agent Builder ",(0,o.kt)("a",{parentName:"p",href:"https://regression-games.sleekplan.app/feedback"},"here"),".")),(0,o.kt)("h2",{id:"what-is-a-behavior-tree"},"What Is a Behavior Tree?"),(0,o.kt)("p",null,"A behavior tree is a decision-making model used to determine which actions an agent (such as a character in a video game) should take in different situations.\nYou can think of it as a flow chart that the AI thinks through, choosing appropriate actions based on what it knows about itself and its environment.\nBehavior trees are composed of nodes organized in a hierarchical structure that start at a root node and branch out to form different paths.\nEach path represents a line of decision-making that results in one or more actions for the AI to take."),(0,o.kt)("p",null,"Each node in the tree executes logic and returns one of the following states as a result:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Running")," -> The node is currently being executed and hasn't completed yet."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Success")," -> The node has completed successfully."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Failure")," -> The node has failed. This doesn't necessarily mean an error occurred. For example, a heal action might fail if the character doesn't have any potions.")),(0,o.kt)("p",null,"Different types of nodes have different responsibilities and react differently to the states of other nodes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Root Node"),": The beginning of the tree, where the AI starts its decision-making.\nIts job is simply to execute whatever node is below it in the tree and return its state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Sequence Node"),": This node has one or more children and acts as a logical AND.\nIt executes its child nodes one at a time, and if any of them fail then the Sequence Node immediately fails."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Selector Node"),": This node also has one or more children, but acts as an OR.\nIt executes each of its children and if one of them succeeds, then the Selector Node immediately succeeds."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Action Node"),": This node is a leaf node, meaning it cannot have any children of its own.\nInstead, it represents an action for the AI to take such as moving in a certain direction or interacting with an object in its environment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Condition Node"),": This node is also a leaf node. It evaluates whether certain conditions have been satisfied."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Decorator Node"),': There are several kinds of Decorator Nodes, each of which can have only one child. This node modifies its child\'s state in some way.\nFor example, an "Inverter" Decorator will succeed if its child fails, and vice versa.')),(0,o.kt)("p",null,"For a deeper dive into behavior trees, their nodes, and practical examples of their usage in video games, ",(0,o.kt)("a",{parentName:"p",href:"https://www.gamedeveloper.com/programming/behavior-trees-for-ai-how-they-work"},"follow this link"),"."),(0,o.kt)("h2",{id:"getting-started-with-agent-builder"},"Getting Started with Agent Builder"),(0,o.kt)("p",null,"Create a new AI from the Bot Manager and select ",(0,o.kt)("inlineCode",{parentName:"p"},"Agent Builder")," from the list of creation options\n(see the section on ",(0,o.kt)("a",{parentName:"p",href:"./starter-templates"},"Cloning a Starter Template")," to complete this step)."),(0,o.kt)(i.ZP,{mdxType:"CreateBotImages"}),(0,o.kt)("h2",{id:"loading-your-tree"},"Loading Your Tree"),(0,o.kt)("p",null,"If you've used the Agent Builder to create a bot before, you can locate that bot in the Bot Manager and open the Agent Builder interface.\nOnce the interface is visible, tell Regression Games to load your tree from GitHub. You should now see your tree and be able to edit its nodes.\nDon't forget to save when you're done!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Open Agent Builder",src:n(5827).Z,width:"1764",height:"444"}),"\n",(0,o.kt)("img",{alt:"Load Your Tree",src:n(6757).Z,width:"1952",height:"682"})),(0,o.kt)("h2",{id:"adding-nodes"},"Adding Nodes"),(0,o.kt)("p",null,"Whenever you create a fresh Agent Builder project for your AI, we'll start you out with a root node and a sequence node to form the basis of your tree."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Default Tree",src:n(9952).Z,width:"3452",height:"1698"})),(0,o.kt)("p",null,"To begin building your tree, click the connector at the bottom of the sequence node and drag.\nWhen you release, you'll be presented with different types of nodes that can be added to this sequence.\nFor this demonstration, we'll create an action node.\nYou can repeat this process for any node that is allowed to have children."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Select a Node Type",src:n(3963).Z,width:"1628",height:"1510"}),"\n",(0,o.kt)("img",{alt:"Create an Action Node",src:n(2304).Z,width:"1628",height:"944"}),"\n",(0,o.kt)("img",{alt:"Example Tree",src:n(9426).Z,width:"1628",height:"1362"})),(0,o.kt)("p",null,"Clicking on a node opens a panel to the right side of your screen.\nThis panel contains information about the selected node including a description of the node's type and a label, as well as a button to delete the node from the tree.\nIt's a good idea to set labels to keep track of what you want each node or branch to do.\nIf the selected node is a leaf node, such as an action or condition, then the panel will also contain fields used for defining the node's behavior via code."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Open the Node Panel",src:n(4642).Z,width:"3410",height:"1982"})),(0,o.kt)("h3",{id:"adding-code"},"Adding Code"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"All samples in this section are written in Typescript, which is the only language currently supported by the Agent Builder.\nIf you'd like to see support for other languages, let us know ",(0,o.kt)("a",{parentName:"p",href:"https://regression-games.sleekplan.app/feedback"},"here"),".")),(0,o.kt)("p",null,"The nodes in your tree won't be useful until you give them some logic to execute.\nClick on a leaf node to open the side-panel. You'll see the following stub provided in the editor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"class LeafNode extends TreeNode {\n    public override async execute(): Promise<NodeStatus> {\n        return NodeStatus.SUCCESS;\n    }\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"All of your node's code must be defined within the ",(0,o.kt)("inlineCode",{parentName:"p"},"LeafNode")," class, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method must be defined as your entrypoint into the node.\nYou may encounter errors loading your AI into a game if these are not properly defined when you save your tree.")),(0,o.kt)("p",null,"You can either manually fill in code using the editor (see the ",(0,o.kt)("a",{parentName:"p",href:"../supported-games/minecraft/apis/rg-bot-api"},"rg-bot API"),'), or you can have GPT do the heavy lifting for you.\nTo generate code using GPT, describe what you want this node to do in the "GPT Prompt" field then click the "Generate Code" button.\nThe editor will be disabled as code appears, and you can modify the output once it\'s finished.\nWe supplement your prompt with additional context about our APIs but GPT may produce output that doesn\'t follow our expected format,\nor code that functions differently in-game than your prompt intends.\nIf this happens, you may need to alter your prompt and re-submit it for new output, or fix output manually.'),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Generating Code will overwrite anything currently in the editor. It's a good idea to save your tree before trying out new prompts.")),(0,o.kt)("p",null,"You may notice that the generated code uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"getData")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"setData")," methods.\nThese can be used to share data between nodes, and it's a good practice to specify a type with ",(0,o.kt)("inlineCode",{parentName:"p"},"getData")," to take advantage of the editor's Intellisense.\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// "bot" is available to you by default\nconst bot = this.getData<RGBot>("bot");\n\n// you can also define and retrieve your own key-value pairs\nthis.setData("myString", "Hello World");\nconst myString = this.getData<string>("myString");\n\nthis.setData("myBool", true);\nconst myBool = this.getData<boolean>("myBool");\n')),(0,o.kt)("p",null,"The below sample uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Regression-Games/RegressionBot"},"rg-bot library for Minecraft")," to make the AI wander in a random direction.\nIt demonstrates usage of these methods and how to properly format your code."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Generate Code",src:n(5367).Z,width:"1680",height:"1826"})),(0,o.kt)("h3",{id:"validating-code"},"Validating Code"),(0,o.kt)("p",null,'The embedded code editor offers standard syntax highlighting and Intellisense features for Regressions Games APIs.\nTo take this a step further, GPT can analyze code from the editor and provide suggestions for fixing syntax errors, bugs, and inefficiencies.\nClicking the "Validate Code" button will cause a text box to appear with GPT\'s analysis results.'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Validate Code",src:n(8420).Z,width:"3232",height:"1678"})),(0,o.kt)("p",null,"You can close these results at any time, and reopen them by clicking the clipboard icon."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ReOpen Validation Results",src:n(1674).Z,width:"1686",height:"844"})),(0,o.kt)("h2",{id:"saving-your-tree"},"Saving Your Tree"),(0,o.kt)("p",null,"Save your tree early and often! Any changes made to your AI will be lost if you leave the Agent Builder without saving."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Save Your Tree",src:n(7290).Z,width:"1952",height:"682"})),(0,o.kt)("h2",{id:"editing-an-ais-source-code"},"Editing an AI's source code"),(0,o.kt)("p",null,"Whenever you save your tree, multiple files are pushed to GitHub - a config file named ",(0,o.kt)("inlineCode",{parentName:"p"},"agentBuilderWorkspace.json")," which defines the nodes in your tree,\nand a series of typescript files generated from the config that are used to run your AI in-game."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 BaseClasses\n\u2502   \u2502   \u251c\u2500\u2500 **/*.ts\n\u2502   \u251c\u2500\u2500 **/*.ts\n\u251c\u2500\u2500 agentBuilderWorkspace.json\n\u251c\u2500\u2500 index.ts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 .gitignore\n")),(0,o.kt)("p",null,"You can modify these files in your favorite IDE for more control over the AI's behaviors and dependencies.\nSee the ",(0,o.kt)("a",{parentName:"p",href:"./coding/dev-requirements"},"Writing Your Own Code section")," for more information."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Changes made to files other than the ",(0,o.kt)("inlineCode",{parentName:"p"},"agentBuilderWorkspace.json")," will be overwritten when you save the tree from the Agent Builder interface.\nIf you plan to modify files manually, it's a good idea to create a new GitHub repository to prevent losing your work.")))}h.isMDXComponent=!0},9952:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/default-tree-94e55f80b37d268aa5ec31166c0321df.png"},4642:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/edit-node-bfbfd211cc70ca494c55339461817eb5.png"},9426:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/example-tree-1-3faed7f282c29dde923628b01f8603d1.png"},5367:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/generate-code-25fcf255db5bc10e199d4ce451e58da0.png"},6757:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/load-tree-c9f2487b18b8dd58538a7c5d39773937.png"},2304:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/new-action-node-0ed481de19f01ed6763486426af3c21b.png"},5827:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/open-agent-builder-bd315e2712f11b71057d5087d44c4929.png"},1674:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/reopen-validation-results-c80bdbc4b7ea06c9a2783c0ab2a57d70.png"},7290:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/save-tree-5a4a46be876cbf8abdcc2d56eee44799.png"},3963:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/select-node-type-38ba76b782100130d8ff9046f8913ceb.png"},8420:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/validate-code-96e4505ec7f2194a31bdd871aeea66ad.png"},3135:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/bot-creation-options-d59e9e9f95ff5b1138207668088b6430.png"},7399:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/create-bot-button-166c7415adc4d1edd3bfd940bea5127b.png"}}]);