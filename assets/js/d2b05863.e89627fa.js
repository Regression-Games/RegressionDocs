"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[4998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>P,contentTitle:()=>T,default:()=>B,frontMatter:()=>j,metadata:()=>S,toc:()=>D});var a=n(7462),r=n(7294),o=n(3905),i=n(6010),s=n(2466),l=n(6550),u=n(1980),c=n(7392),p=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=m(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,u]=b({queryString:n,groupId:a}),[c,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=l??c;return f({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),d(e)}),[u,d,o]),tabValues:o}}var g=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(p(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,i.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function O(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(w,(0,a.Z)({},e,t)))}function k(e){const t=(0,g.Z)();return r.createElement(O,(0,a.Z)({key:String(t)},e))}const E={tabItem:"tabItem_Ymn6"};function I(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(E.tabItem,a),hidden:n},t)}const j={sidebar_label:"Adaptive Bots"},T="Defining Bots that Adapt to the Game State",S={unversionedId:"creating-bots/csharp/adaptive-bots",id:"creating-bots/csharp/adaptive-bots",title:"Defining Bots that Adapt to the Game State",description:"Defining a Unity Bot in C# is as simple as creating a MonoBehaviour that implements the IRGBot interface.",source:"@site/docs/creating-bots/csharp/adaptive-bots.mdx",sourceDirName:"creating-bots/csharp",slug:"/creating-bots/csharp/adaptive-bots",permalink:"/creating-bots/csharp/adaptive-bots",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Adaptive Bots"},sidebar:"unitySidebar",previous:{title:"Authenticating with API Keys",permalink:"/authenticating-with-api-keys"}},P={},D=[],G={toc:D},N="wrapper";function B(e){let{components:t,...n}=e;return(0,o.kt)(N,(0,a.Z)({},G,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"defining-bots-that-adapt-to-the-game-state"},"Defining Bots that Adapt to the Game State"),(0,o.kt)("p",null,"Defining a Unity Bot in C# is as simple as creating a MonoBehaviour that implements the IRGBot interface.\nThe IRGBot interface has no methods, but is used by the Regression Games SDK to identify bots that can be started from the in game overlay."),(0,o.kt)(k,{mdxType:"Tabs"},(0,o.kt)(I,{value:"sample_Bot",label:"Perform actions on players and NPCs",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'/**\n * Outline of this Bot algorithm. For every update:\n *  - If enough time has passed for the bot to process a new update, handle the update.\n *  - Select a random nearby player or enemy if one exists\n *    - Follow that entity at distance 2f\n *    - Perform a skill targeting that entity and position\n * Note: This bot code works with the Unity multiplayer sample project fork @ https://github.com/Regression-Games/RGBossRoom\n */\npublic class SampleBot: MonoBehaviour, IRGBot\n{\n    private float _lastUpdate = -1f;\n    private static readonly float _updateEveryXSeconds = 2.0f;\n\n    public void Update()\n    {\n        var time = Time.time;\n        if (time - _lastUpdate > _updateEveryXSeconds)\n        {\n            HandleUpdate(this.gameObject);\n            _lastUpdate = time;\n        }\n    }\n\n    public void HandleUpdate(GameObject spawnedGameObject)\n    {\n        var entities = FindObjectsByType<ServerCharacter>(FindObjectsSortMode.None);\n\n        if (entities.Length > 0)\n        {\n            // default to friendly ability\n            var skillId = 0;\n\n            GameObject target = entities[new Random().Next(entities.Length)].gameObject;\n            spawnedGameObject.GetComponent<RGFollowObjectAction>().FollowObject(target.transform, 2f);\n\n\n            if (target.GetComponent<RGEnemyState>() != null)\n            {\n                // if enemy.. set ability to 1\n                skillId = 1;\n            }\n\n            var targetPosition = target.transform.position;\n\n            spawnedGameObject.GetComponent<RGPerformSkillAction>().PerformSkill(skillId, target.GetInstanceID(), targetPosition);\n        }\n        else\n        {\n            RGDebug.LogWarning("No entities found...");\n        }\n    }\n}\n')))))}B.isMDXComponent=!0}}]);