"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[3304],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>g});var o=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,o,i=function(t,e){if(null==t)return{};var n,o,i={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=o.createContext({}),u=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},c=function(t){var e=u(t.components);return o.createElement(l.Provider,{value:e},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},h=o.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,l=t.parentName,c=r(t,["components","mdxType","originalType","parentName"]),d=u(n),h=i,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return n?o.createElement(g,s(s({ref:e},c),{},{components:n})):o.createElement(g,s({ref:e},c))}));function g(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,s=new Array(a);s[0]=h;var r={};for(var l in e)hasOwnProperty.call(e,l)&&(r[l]=e[l]);r.originalType=t,r[d]="string"==typeof t?t:i,s[1]=r;for(var u=2;u<a;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2324:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_label:"Testing with GitHub Actions"},s="Testing with GitHub Actions",r={unversionedId:"studios/unity/tutorials/github_actions",id:"studios/unity/tutorials/github_actions",title:"Testing with GitHub Actions",description:"This tutorial will walk you through the following steps to create a QA Bot for your Unity project using",source:"@site/docs/studios/unity/tutorials/github_actions.md",sourceDirName:"studios/unity/tutorials",slug:"/studios/unity/tutorials/github_actions",permalink:"/studios/unity/tutorials/github_actions",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Testing with GitHub Actions"},sidebar:"studiosSidebar",previous:{title:"Building Your First Bot",permalink:"/studios/unity/tutorials/first_tutorial"},next:{title:"Studio FAQ",permalink:"/studios/faq"}},l={},u=[{value:"Add GitHub Actions Workflow Files",id:"add-github-actions-workflow-files",level:2},{value:"Create a New Branch in Your Project",id:"create-a-new-branch-in-your-project",level:3},{value:"Follow the Steps on GameCI to Activate a Unity License",id:"follow-the-steps-on-gameci-to-activate-a-unity-license",level:3},{value:"Add the Workflow File to Your Project",id:"add-the-workflow-file-to-your-project",level:3},{value:"Configure GitHub Actions",id:"configure-github-actions",level:2},{value:"Add a Test to Your Unity Project",id:"add-a-test-to-your-unity-project",level:2},{value:"Add Your Scenes to Your Build",id:"add-your-scenes-to-your-build",level:3},{value:"Configure Test Runner for Your Project",id:"configure-test-runner-for-your-project",level:3},{value:"Create an <code>RGBotTests</code> File to Run Your Bot",id:"create-an-rgbottests-file-to-run-your-bot",level:3},{value:"Test it out with an Existing Bot",id:"test-it-out-with-an-existing-bot",level:3},{value:"Pushing Your Changes",id:"pushing-your-changes",level:2},{value:"Viewing Test Results",id:"viewing-test-results",level:2}],c={toc:u},d="wrapper";function p(t){let{components:e,...a}=t;return(0,i.kt)(d,(0,o.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"testing-with-github-actions"},"Testing with GitHub Actions"),(0,i.kt)("p",null,"This tutorial will walk you through the following steps to create a QA Bot for your Unity project using\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions"},"GitHub Actions")," and ",(0,i.kt)("a",{parentName:"p",href:"https://game.ci"},"GameCI"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add GitHub Actions workflow files to your project to enable Unity builds."),(0,i.kt)("li",{parentName:"ol"},"Configure the GitHub Actions workflow files to work with GameCI and Regression Games."),(0,i.kt)("li",{parentName:"ol"},"Add a test to your Unity project that will start and run your bot."),(0,i.kt)("li",{parentName:"ol"},"Learn how to view test results.")),(0,i.kt)("p",null,"This tutorial assumes you have some familiarity with GitHub Actions, and that you have a working\nbot within your game (see more on this in the ",(0,i.kt)("a",{parentName:"p",href:"/studios/unity/unity-sdk/creating-bots/javascript/configuration"},"Creating Bots in JavaScript section"),").\nBy the end of this tutorial, every push to your GitHub repo will build your Unity project and start bots for testing.\nYou can find a working example in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Regression-Games/RGUnitySample"},"this repository")," for reference, which has\na GitHub Action configuration and Unity Test Runner file incorporating the ideas of this tutorial."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This guide is subject to change, as the product is an ",(0,i.kt)("strong",{parentName:"p"},"early preview"),". We\nare making changes based on your recommendations and feedback, so let us know what you think at\n",(0,i.kt)("a",{parentName:"p",href:"mailto:info@regression.gg"},"info@regression.gg"),", or join our ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/invite/925SYVse2H"},"Discord"),". This particular\ntutorial is a first-pass at supporting CI/CD, but more features are coming soon to make this easier!")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This feature requires a Unity license, as CI/CD builds for Unity are only available to those with\na Unity license. If you want to use an existing CI/CD pipeline, you can skip ahead to the sections\nbelow regarding ",(0,i.kt)("a",{parentName:"p",href:"#3-add-the-qa-bot-workflow-file-to-your-project"},"test configurations")," and\n",(0,i.kt)("a",{parentName:"p",href:"#add-a-test-to-your-unity-project"},"test files"),".")),(0,i.kt)("h2",{id:"add-github-actions-workflow-files"},"Add GitHub Actions Workflow Files"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://game.ci/"},"GameCI")," provides a collection of GitHub Actions for building Unity projects. This is our foundation\nfor running GitHub CI/CD builds for Unity."),(0,i.kt)("h3",{id:"create-a-new-branch-in-your-project"},"Create a New Branch in Your Project"),(0,i.kt)("p",null,"First, create a new branch in your project so that you can test out the GitHub Actions workflow files before committing them to your\nmain branch. You can name this branch anything, but we named ours ",(0,i.kt)("inlineCode",{parentName:"p"},"qa-tests"),"."),(0,i.kt)("h3",{id:"follow-the-steps-on-gameci-to-activate-a-unity-license"},"Follow the Steps on GameCI to Activate a ",(0,i.kt)("a",{parentName:"h3",href:"https://game.ci/docs/github/activation"},"Unity License")),(0,i.kt)("p",null,"It is critical that you follow this step! This allows the CI/CD Docker images to properly start and use Unity.\nYou can test that the license is configured properly by running this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/unity-activate"},"GitHub Action"),"\nin your GitHub repository."),(0,i.kt)("h3",{id:"add-the-workflow-file-to-your-project"},"Add the Workflow File to Your Project"),(0,i.kt)("p",null,"The workflow file is a GitHub Action that will build your Unity project and start a test that will run a bot. From step 2 above,\nyou should have a ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows")," folder inside of your project/repository. Inside of this folder, create a new file called\n",(0,i.kt)("inlineCode",{parentName:"p"},"qa-bot.yml")," and paste the contents below. You can also download the file directly from ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/Regression-Games/RGUnitySample/main/.github/workflows/main.yml"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"#file: .github/workflows/qa-bot.yml\n\nname: Regression Games Bots QA \ud83e\udd16\n\non: [push]\n\n# See https://game.ci/docs/github/test-runner and RG_DOCS for more info\njobs:\n  build:\n    name: Build and run bots \u2728\n    runs-on: ubuntu-latest\n    permissions: write-all # This is to allow writing results into the artifacts section of GitHub Actions\n    steps:\n          \n      # Checkout (without LFS)\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Git LFS\n      - name: Create LFS file list\n        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id\n\n      - name: Restore LFS cache\n        uses: actions/cache@v3\n        id: lfs-cache\n        with:\n          path: .git/lfs\n          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}\n\n      - name: Git LFS Pull\n        run: |\n          git lfs pull\n          git add .\n          git reset --hard\n\n      # Cache\n      - uses: actions/cache@v3\n        with:\n          path: Library\n          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}\n          restore-keys: |\n            Library-\n\n      # Test\n      # See https://game.ci/docs/github/test-runner for more information\n      - name: Run tests\n        uses: game-ci/unity-test-runner@v2\n        env:\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\n        with:\n          customParameters: -RG_BOT ${{ secrets.RG_BOT }} -RG_API_KEY ${{ secrets.RG_API_KEY }} -RG_HOST ${{ secrets.RG_HOST }}\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n\n      # Output\n      - uses: actions/upload-artifact@v3\n        with:\n          name: Build\n          path: build\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that this will actually run all of your tests, not just the bot test. To configure this workflow to only\nrun the bot test, see the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Packages/com.unity.test-framework@2.0/manual/reference-command-line.html"},"Unity Test Runner Command Line docs"),",\nwhich has filter options that can be passed within ",(0,i.kt)("inlineCode",{parentName:"p"},"customParameters")," within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Run tests")," step above. For example,\nsee the ",(0,i.kt)("inlineCode",{parentName:"p"},"customParameters")," property below:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n- name: Run tests\n  uses: game-ci/unity-test-runner@v2\n  env:\n    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\n  with:\n    customParameters: -testFilter "<name of method to test>" -RG_BOT ${{ secrets.RG_BOT }} -RG_API_KEY ${{ secrets.RG_API_KEY }} -RG_HOST ${{ secrets.RG_HOST }}\n    githubToken: ${{ secrets.GITHUB_TOKEN }}\n...\n'))),(0,i.kt)("h2",{id:"configure-github-actions"},"Configure GitHub Actions"),(0,i.kt)("p",null,"The final piece on the GitHub actions side is to configure the secrets that are used in the workflow file above. Visit the secrets\npage for your GitHub repository by going to your ",(0,i.kt)("strong",{parentName:"p"},"Repo")," > ",(0,i.kt)("strong",{parentName:"p"},"Settings")," > ",(0,i.kt)("strong",{parentName:"p"},"Secrets and variables")," > ",(0,i.kt)("strong",{parentName:"p"},"Actions"),". Add\nthe following secrets by clicking the green ",(0,i.kt)("strong",{parentName:"p"},"New repository secret")," button."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"RG_HOST")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"https://play.regression.gg")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"RG_API_KEY")," - Your API key from Regression Games, which can be found in your ",(0,i.kt)("a",{parentName:"li",href:"https://play.regression.gg/account"},"account settings"),".\nFull instructions for this can be found in the ",(0,i.kt)("a",{parentName:"li",href:"studios/api_reference/authentication"},"Authentication docs"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"RG_BOT")," - The ID of the bot you want to run. You can find this through the bot's details within the Regression Games\n",(0,i.kt)("a",{parentName:"li",href:"https://play.regression.gg/bots"},"Bot Manager page"),".")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Bot ID",src:n(9390).Z,width:"2100",height:"900"})),(0,i.kt)("p",null,"Once you are done adding these secrets, your secrets section should look similar to the following:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Secrets for GitHub Actions",src:n(2359).Z,width:"1572",height:"922"})),(0,i.kt)("h2",{id:"add-a-test-to-your-unity-project"},"Add a Test to Your Unity Project"),(0,i.kt)("p",null,"The bots are started via the Unity Test Runner in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/2019.1/Documentation/Manual/PlaymodeTestFramework.html"},"Play Mode"),",\nIn this testing mode, the game starts as if you are playing it, and then terminates once the function finishes."),(0,i.kt)("p",null,"Complete the following steps to setup the required test - feel free to skip some of these steps if you have existing Play tests\nin your Unity project."),(0,i.kt)("h3",{id:"add-your-scenes-to-your-build"},"Add Your Scenes to Your Build"),(0,i.kt)("p",null,"Before adding the test, make sure your desired test scenes are placed inside your build. You can add your scenes to the build\nusing the menu option ",(0,i.kt)("strong",{parentName:"p"},"File")," > ",(0,i.kt)("strong",{parentName:"p"},"Build Settings"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Build settings",src:n(9068).Z,width:"1254",height:"1238"})),(0,i.kt)("h3",{id:"configure-test-runner-for-your-project"},"Configure Test Runner for Your Project"),(0,i.kt)("p",null,"Next, we need to configure the Unity Test Runner for your project. To do this, go to ",(0,i.kt)("strong",{parentName:"p"},"Window")," > ",(0,i.kt)("strong",{parentName:"p"},"General")," > ",(0,i.kt)("strong",{parentName:"p"},"Test Runner"),".\nThen, in the pane that open, click ",(0,i.kt)("strong",{parentName:"p"},"Play Mode")," > ",(0,i.kt)("strong",{parentName:"p"},"Create PlayMode Test Assembly Folder"),". Create that tests folder with\nthe name ",(0,i.kt)("inlineCode",{parentName:"p"},"Tests"),", and find that folder in your editor (e.g. Rider, Visual Studio). You should see a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"Tests.asmdef")," -\nopen that file and replace it with the contents below, which will include Regression Games as a dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "Tests",\n    "references": [\n        "RegressionGames"\n    ],\n    "optionalUnityReferences": [\n        "TestAssemblies"\n    ]\n}\n')),(0,i.kt)("p",null,"You can learn more about the Test Runner and setup instructions ",(0,i.kt)("a",{parentName:"p",href:"https://docs.unity.cn/560/Documentation/Manual/testing-editortestsrunner.html"},"here"),"."),(0,i.kt)("h3",{id:"create-an-rgbottests-file-to-run-your-bot"},"Create an ",(0,i.kt)("inlineCode",{parentName:"h3"},"RGBotTests")," File to Run Your Bot"),(0,i.kt)("p",null,"Within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tests")," folder, create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"RGBotTests.cs")," and copy the following contents into the file."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Make sure to edit the file below to use the correct starting scene for your test! Update ",(0,i.kt)("inlineCode",{parentName:"p"},"Scenes/SampleScene")," to\ninstead be the scene you are starting with.")),(0,i.kt)("p",null,"Also, update ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultBotId")," to an ID of a bot that you'd like to start in your local editor. Remember, you can find\nthe ID of a bot within the ",(0,i.kt)("a",{parentName:"p",href:"https://play.regression.gg/bots"},"Bot Manager page"),". You can also download the file\ndirectly from ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/Regression-Games/RGUnitySample/main/Assets/Tests/RGBotTests.cs"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\nusing System.Threading;\nusing NUnit.Framework;\nusing RegressionGames;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.TestTools;\n\npublic class RGBotTests\n{\n\n    private string timeNow()\n    {\n        return $"{DateTime.Now:yyyy-MM-ddTHH:mm:ss:ffff}  [{Thread.CurrentThread.ManagedThreadId}] --- ";\n    }\n    \n    [UnityTest]\n    public IEnumerator RunBotTest()\n    {\n\n        Debug.Log($"{timeNow()} Starting test");\n\n        // Override this to change how long a test will wait for bots to join before failing\n        const int QUEUE_TIMEOUT_IN_SECONDS = 30;\n        const int CONNECT_TIMEOUT_IN_SECONDS = 60;\n        const int TEST_RUN_TIMEOUT_IN_SECONDS = 300;\n\n        // For in-editor purposes, feel free to define a default bot to use!\n        int defaultBotId = 0;\n\n        // NOTE: Make sure to fill in the name of the scene to start your test with!\n        Debug.Log($"{timeNow()} Waiting for scene to load...");\n        AsyncOperation asyncLoadLevel = SceneManager.LoadSceneAsync("Scenes/SampleScene", LoadSceneMode.Single);\n        // Wait until the scene finishes loading, then wait a frame so every Awake and Start method is called\n        while (!asyncLoadLevel.isDone)\n        {\n            yield return null;\n        }\n        yield return null;\n        \n        Debug.Log($"{timeNow()} Scene loaded");\n\n        // Grab the bot to start (override with the one from CI/CD if defined)\n        if (RGEnvConfigs.ReadBotId() != null)\n        {\n            defaultBotId = Int32.Parse(RGEnvConfigs.ReadBotId());\n        }\n        int[] botIds = {defaultBotId};\n        Debug.Log($"{timeNow()} Loaded config, using bots {string.Join(", ", botIds)}");\n        \n        // do this before the queue\n        RGBotServerListener.GetInstance().StartGame();\n\n        // startup all the queue requests\n        foreach (var botId in botIds)\n        {\n            Debug.Log(\n                $"{timeNow()} Running task to spawn bot with ID: {botId}");\n            var task = RGServiceManager.GetInstance()\n                .QueueInstantBot((long) botId, (botInstance) =>\n                {\n                    RGBotServerListener.GetInstance().AddClientConnectionForBotInstance(botInstance.id, RGClientConnectionType.REMOTE);\n                }, () =>\n                {\n                    Debug.LogError($"{timeNow()} Error starting bot with ID {botId}");\n                });\n            Debug.Log($"{timeNow()} Waiting for bot ID: {botId} to be queued (Completed: {task.IsCompleted}) ...");\n            while (!task.IsCompleted)\n            {\n                yield return null;\n            }\n            var startTime = DateTime.Now;\n            while (!task.IsCompleted &&\n                   (DateTime.Now.Subtract(startTime).TotalSeconds < QUEUE_TIMEOUT_IN_SECONDS))\n            {\n                yield return null;\n            }\n            \n            if (!task.IsCompletedSuccessfully)\n            {\n                Debug.LogWarning($"{timeNow()} Error running task to queue bot id: {botId}\\r\\n" +\n                                 $"Status: {task.Status}\\r\\n" +\n                                 $"AsyncState: {task.AsyncState}\\r\\n" +\n                                 $"Completed: {task.IsCompleted}\\r\\n" +\n                                 $"Canceled: {task.IsCanceled}\\r\\n" +\n                                 $"Faulted: {task.IsFaulted}\\r\\n" +\n                                 $"Exception: {task.Exception}");\n                RGBotServerListener.GetInstance()?.StopGame();\n                Assert.Fail($"{timeNow()} Bot id: {botId} failed to handle queue request within {QUEUE_TIMEOUT_IN_SECONDS} seconds");\n            }\n        }\n\n        Debug.Log($"{timeNow()} All bot queue requests sent!");\n        \n        // Wait until at least one bot is connected. Fail the test if the connection takes too long\n        Debug.Log($"{timeNow()} Waiting for bots to connect...");\n        var beginTime = DateTime.Now;\n        while (!RGBotServerListener.GetInstance().HasBotsRunning() &&\n               (DateTime.Now.Subtract(beginTime).TotalSeconds < CONNECT_TIMEOUT_IN_SECONDS))\n        {\n            yield return null;\n        }\n\n        if (!RGBotServerListener.GetInstance().HasBotsRunning())\n        {\n            Debug.Log($"{timeNow()} Bots failed to connect within {CONNECT_TIMEOUT_IN_SECONDS} seconds");\n            RGBotServerListener.GetInstance()?.StopGame();\n            Assert.Fail($"{timeNow()} Bots failed to connect within {CONNECT_TIMEOUT_IN_SECONDS} seconds");\n        }\n        \n        Debug.Log($"{timeNow()} Bots connected! Letting them run...");\n        RGBotServerListener.GetInstance().SpawnBots();\n        // Now run until all bots complete their tasks\n        beginTime = DateTime.Now;\n        while (RGBotServerListener.GetInstance().HasBotsRunning() &&\n               (DateTime.Now.Subtract(beginTime).TotalSeconds < TEST_RUN_TIMEOUT_IN_SECONDS))\n        {\n            yield return null;\n        }\n\n        if (RGBotServerListener.GetInstance().HasBotsRunning())\n        {\n            Debug.Log($"{timeNow()} Bots failed to finish their test run within {TEST_RUN_TIMEOUT_IN_SECONDS} seconds");\n            RGBotServerListener.GetInstance()?.StopGame();\n            Assert.Fail($"{timeNow()} Bots failed to finish their test run within {TEST_RUN_TIMEOUT_IN_SECONDS} seconds");\n        }\n        \n        Debug.Log($"{timeNow()} Test finished! Cleaning up");\n        \n        // Cleanup when done\n        RGBotServerListener.GetInstance()?.StopGame();\n    }\n    \n}\n')),(0,i.kt)("p",null,"At a high level, this test is doing the following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Loading the scene, and waiting for it to start up before activating bots"),(0,i.kt)("li",{parentName:"ol"},"Queuing up a task that will start a bot and spawn it into the scene"),(0,i.kt)("li",{parentName:"ol"},"The test then waits for at least one bot to connect. If a bot does not connect within one minute, the test will fail."),(0,i.kt)("li",{parentName:"ol"},"Once at least one bot is connected, the test runs until all bots complete their tasks (i.e the bot calls ",(0,i.kt)("inlineCode",{parentName:"li"},"rg.complete()"),"), or\nuntil the timeout is reached.")),(0,i.kt)("h3",{id:"test-it-out-with-an-existing-bot"},"Test it out with an Existing Bot"),(0,i.kt)("p",null,"Our test is now setup! Before we commit and push our changes, let's test it out locally with an existing bot. To do this, you can\nfollow the ",(0,i.kt)("a",{parentName:"p",href:"/studios/unity/tutorials/first_tutorial"},"first bot guide")," or ",(0,i.kt)("a",{parentName:"p",href:"/studios/unity/unity-sdk/creating-bots/javascript/configuration"},"creating bots reference"),"\nto create and configure a bot. As a quick test, you can make a bot that simply waits for a few seconds before completing its test. Note\nthat ",(0,i.kt)("strong",{parentName:"p"},"having your bot call ",(0,i.kt)("inlineCode",{parentName:"strong"},"rg.complete()")," is extremely important! Without this line of code, your bot will run forever!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export function configureBot(rg) {\n  // No config for now\n}\n\nvar startTime = null\n\nexport async function processTick(rg) {\n\n  if (!startTime) startTime = new Date().getTime();\n\n  if (new Date().getTime() - startTime > 5000) {\n    // Now try to finish\n    rg.complete();\n  }\n\n}\n")),(0,i.kt)("h2",{id:"pushing-your-changes"},"Pushing Your Changes"),(0,i.kt)("p",null,"Once you are satisfied with your local test, you can commit and push your changes to your GitHub repository. This will trigger the\nGitHub Actions workflow, which will build your Unity project and start your bot. You can view the status of your workflow by going\nto the ",(0,i.kt)("strong",{parentName:"p"},"Actions")," tab of your GitHub repository."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Actions tab",src:n(6100).Z,width:"3444",height:"618"})),(0,i.kt)("p",null,"Once your workflow has completed, you can view the results of your test by clicking on the ",(0,i.kt)("strong",{parentName:"p"},"Build my project")," step of your workflow.\nYou should see that the bot successfully started and executed!"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Build step",src:n(7212).Z,width:"3452",height:"1910"})),(0,i.kt)("h2",{id:"viewing-test-results"},"Viewing Test Results"),(0,i.kt)("p",null,"Once your tests have completed, you can view their results on Regression Games by navigating to the ",(0,i.kt)("strong",{parentName:"p"},"History")," section of the\n",(0,i.kt)("a",{parentName:"p",href:"https://play.regression.gg/running-bots"},"Running Bots")," tab. From this page you can download bot logs for the test session which\ncontain output from your bot-code. You can also download in-game replay data which can be loaded in the Unity Editor to watch the\nmovements and actions of each bot, as well as analyze the validations they performed. See the\n",(0,i.kt)("a",{parentName:"p",href:"/studios/unity/unity-sdk/in-editor-replay"},"In-Editor Replay")," for instructions on how to load replay data."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Downloads",src:n(2874).Z,width:"3456",height:"1932"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The timeline feature",src:n(9852).Z,width:"2212",height:"1432"})))}p.isMDXComponent=!0},6100:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/actions_tab-24dafff481265fd2b4549f038436c015.png"},9390:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/bot_id-2c0ca5f00c854c14491c3bc03344612b.png"},9068:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/build-235f0f2376a875abb82801e035e76f3b.png"},7212:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/build_step-2e7b640b39a8a1c69fa0ce832e02d5bb.png"},2874:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/downloads-270c21c7aea240e44ab8ff8618773a58.png"},2359:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/secrets-529f55c3c73f0f5a0cec009d55d951b3.png"},9852:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/timeline-b9df49b0048c7d9cc781e966840bd718.png"}}]);