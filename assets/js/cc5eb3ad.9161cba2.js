"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[4637],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||i;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),i=a(6010),l=a(2466),o=a(6550),s=a(1980),p=a(7392),u=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function h(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=c(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,p]=m({queryString:a,groupId:n}),[d,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),y=(()=>{const e=s??d;return h({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),b(e)}),[p,b,i]),tabValues:i}}var y=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),c=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==o&&(d(t),s(n))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:c},l,{className:(0,i.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function g(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function f(e){const t=b(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(N,(0,n.Z)({},e,t)),r.createElement(g,(0,n.Z)({},e,t)))}function v(e){const t=(0,y.Z)();return r.createElement(f,(0,n.Z)({key:String(t)},e))}},6502:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));a(4866),a(5162);const i={sidebar_label:"Defining States"},l="Defining States",o={unversionedId:"integrating-with-unity/defining-states",id:"integrating-with-unity/defining-states",title:"Defining States",description:"The state of the game sent to Regression Games includes only GameObjects selected to be part of the state.",source:"@site/docs/integrating-with-unity/defining-states.mdx",sourceDirName:"integrating-with-unity",slug:"/integrating-with-unity/defining-states",permalink:"/integrating-with-unity/defining-states",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Defining States"},sidebar:"unitySidebar",previous:{title:"Authenticating with API Keys",permalink:"/authenticating-with-api-keys"},next:{title:"Defining Actions",permalink:"/integrating-with-unity/defining-actions"}},s={},p=[{value:"Ways to include a GameObject in the state...",id:"ways-to-include-a-gameobject-in-the-state",level:2},{value:"1 - <code>RGStatefulGameObject</code> MonoBehaviour",id:"1---rgstatefulgameobject-monobehaviour",level:3},{value:"Core State Properties",id:"core-state-properties",level:4},{value:"2 - <code>[RGStateType]</code> Class Level Attribute",id:"2---rgstatetype-class-level-attribute",level:3},{value:"<code>[RGStateType]</code> Example 1",id:"rgstatetype-example-1",level:4},{value:"<code>[RGStateType]</code> Example 2",id:"rgstatetype-example-2",level:4},{value:"<code>[RGStateType]</code> Example 3",id:"rgstatetype-example-3",level:4},{value:"3 - <code>[RGState]</code> Field/Property/Method Attribute",id:"3---rgstate-fieldpropertymethod-attribute",level:3},{value:"<code>[RGState]</code> Example 1",id:"rgstate-example-1",level:4},{value:"<code>[RGState]</code> Example 2",id:"rgstate-example-2",level:4},{value:"4 - <code>RGActionBehaviour</code> MonoBehaviour",id:"4---rgactionbehaviour-monobehaviour",level:3},{value:"5 - <code>[RGAction]</code> Attribute",id:"5---rgaction-attribute",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-states"},"Defining States"),(0,r.kt)("p",null,"The state of the game sent to Regression Games includes only GameObjects selected to be part of the state."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Exposing every field or property of each Behaviour on every GameObject is too much information to capture each each tick in all but the smallest of games."),(0,r.kt)("p",{parentName:"admonition"},"The methods for exposing state listed below make it quick and easy to expose exactly the amount of state you need.")),(0,r.kt)("h2",{id:"ways-to-include-a-gameobject-in-the-state"},"Ways to include a GameObject in the state..."),(0,r.kt)("h3",{id:"1---rgstatefulgameobject-monobehaviour"},"1 - ",(0,r.kt)("inlineCode",{parentName:"h3"},"RGStatefulGameObject")," MonoBehaviour"),(0,r.kt)("p",null,"By adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"RGStatefulGameObject")," behaviour to a GameObject, that GameObject will be included in the state.\nUnless one of the other methods is used, this will include only the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties of the GameObject."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Adding ",(0,r.kt)("inlineCode",{parentName:"p"},"RGStatefulGameObject")," to a GameObject is ",(0,r.kt)("strong",{parentName:"p"},"NOT")," required when using any of the other methods described below."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"RGStatefulGameObject")," is only useful for GameObjects that should be included in the state, but that do not have any of the attributes below.")),(0,r.kt)("p",null,"Each GameObject is included in the overall state dictionary keyed by its ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("h4",{id:"core-state-properties"},"Core State Properties"),(0,r.kt)("p",null," The core state for each GameObject is put into the state dictionary as an ",(0,r.kt)("inlineCode",{parentName:"p"},"RGStateEntity_Core")," which provides fields for each\nof the core state properties.  Any other state properties can be retrieved using the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetField")," methods on the core StateEntity for a GameObject."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"The transform id of this GameObject.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of this GameObject as seen in the editor.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The tag of this GameObject as seen in the editor, can be null if GameObject is untagged.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scene")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the scene this GameObject is part of.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pathInScene")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The full path to this GameObject in its scene.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"position")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:null},"The position of this GameObject in world space.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rotation")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Quaternion")),(0,r.kt)("td",{parentName:"tr",align:null},"The rotation of this GameObject in world space.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isPlayer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"If true, this GameObject has a MonoBehaviour representing a player controlled object. That player may or may not be driven by a bot.  (See the [",(0,r.kt)("a",{parentName:"td",href:"#2---rgstatetype-class-level-attribute"},"RGStateType"),"] section below for more information.)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"clientId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"long?")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the client that owns/controls this GameObject if it represents a bot.  This field can be null.")))),(0,r.kt)("h3",{id:"2---rgstatetype-class-level-attribute"},"2 - ",(0,r.kt)("inlineCode",{parentName:"h3"},"[RGStateType]")," Class Level Attribute"),(0,r.kt)("p",null,"By adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," attribute to any MonoBehaviour class in your project, ALL GameObjects with that MonoBehaviour attached will be included in the state."),(0,r.kt)("p",null,"Any MonoBehaviour using this attribute will be included in the state under a property named the same as the Behaviour's class name or the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," specified by this attribute."),(0,r.kt)("p",null,"When this attribute is used in a class, a new source file will be autogenerated by Regression Games to represent this entity in the state.\nIf this class includes ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," attributes on fields, properties, or methods, then only those will be included in the state.\nOtherwise, all public fields, properties, and zero parameter methods with return values will be included."),(0,r.kt)("h4",{id:"rgstatetype-example-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"[RGStateType]")," Example 1"),(0,r.kt)("p",null,"This example shows using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"IsPlayer")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to indicate that GameObjects with this MonoBehaviour should be considered players."),(0,r.kt)("p",null,"Source File: KingState.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[RGStateType(IsPlayer = true)]\npublic class KingState : MonoBehaviour\n{\n    public string CharacterType()\n    {\n        return "King";\n    }\n\n    public int Health()\n    {\n        return 100;\n    }\n}\n')),(0,r.kt)("p",null,"Generated File: RGStateEntity_KingState.Generated.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class RGStateEntity_KingState : RGStateEntityBase\n{\n    public static readonly Type BehaviourType = typeof(KingState);\n    public static readonly string EntityTypeName = "KingState";\n    public static readonly bool IsPlayer = true;\n    \n    public override string GetEntityType()\n    {\n        return EntityTypeName;\n    }\n\n    public override bool GetIsPlayer()\n    {\n        return IsPlayer;\n    }\n\n    public override void PopulateFromMonoBehaviour(MonoBehaviour monoBehaviour)\n    {\n        var behaviour = (KingState)monoBehaviour;\n        this["CharacterType"] = behaviour.CharacterType();\n        this["Health"] = behaviour.Health();\n    }\n    \n    public string CharacterType => (string)this["CharacterType"];\n    public int Health => (int)int.Parse(this.GetField("Health").ToString());\n}\n')),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties, this GameObject will also have a property in the state for this generated class."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KingState")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity_KingState")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the KingState MonoBehaviour on this GameObject.")))),(0,r.kt)("p",null,"Also note that if any Behaviour on a GameObject indicates that ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as this example does, then the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state for that GameObject will show the value\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h4",{id:"rgstatetype-example-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"[RGStateType]")," Example 2"),(0,r.kt)("p",null,"This example shows using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"IsPlayer")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to indicate that GameObjects with this MonoBehaviour should be considered players.\nThis example also overrides the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," of this Behaviour that will be used in the state."),(0,r.kt)("p",null,"Source File: PawnState.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[RGStateType("mockPawnState", IsPlayer = true)]\npublic class PawnState : MonoBehaviour\n{\n    public string CharacterType()\n    {\n        return "Pawn";\n    }\n\n    public int Health()\n    {\n        return 1;\n    }\n}\n')),(0,r.kt)("p",null,"Generated File: RGStateEntity_PawnState.Generated.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class RGStateEntity_PawnState : RGStateEntityBase\n{\n    public static readonly Type BehaviourType = typeof(PawnState);\n    public static readonly string EntityTypeName = "mockPawnState";\n    public static readonly bool IsPlayer = true;\n    \n    public override string GetEntityType()\n    {\n        return EntityTypeName;\n    }\n\n    public override bool GetIsPlayer()\n    {\n        return IsPlayer;\n    }\n\n    public override void PopulateFromMonoBehaviour(MonoBehaviour monoBehaviour)\n    {\n        var behaviour = (PawnState)monoBehaviour;\n        this["CharacterType"] = behaviour.CharacterType();\n        this["Health"] = behaviour.Health();\n    }\n    \n    public string CharacterType => (string)this["CharacterType"];\n    public int Health => (int)int.Parse(this.GetField("Health").ToString());\n}\n')),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties, this GameObject will also have a property in the state for this generated class.\nNote that this property name uses the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," attribute."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mockPawnState")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity_PawnState")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the PawnState MonoBehaviour on this GameObject.")))),(0,r.kt)("p",null,"Also note that if any Behaviour on a GameObject indicates that ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as this example does, then the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state for that GameObject will show the value\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h4",{id:"rgstatetype-example-3"},(0,r.kt)("inlineCode",{parentName:"h4"},"[RGStateType]")," Example 3"),(0,r.kt)("p",null,"This example shows using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"IncludeFlags")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"RGStateIncludeFlags.NONE")," to indicate that GameObjects with this MonoBehaviour should be included in the state but without exposing any of their field values.\nThis example also overrides the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," of this Behaviour that will be used in the state."),(0,r.kt)("p",null,"Source File: FieldlessState.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[RGStateType("mockFieldlessState", IncludeFlags = RGStateIncludeFlags.NONE)]\npublic class FieldlessState : MonoBehaviour\n{\n    public string CharacterType()\n    {\n        return "Fieldless";\n    }\n\n    public int Health()\n    {\n        return -1;\n    }\n}\n')),(0,r.kt)("p",null,"Generated File: RGStateEntity_FieldlessState.Generated.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class RGStateEntity_FieldlessState : RGStateEntityBase\n{\n    public static readonly Type BehaviourType = typeof(FieldlessState);\n    public static readonly string EntityTypeName = "mockFieldlessState";\n    public static readonly bool IsPlayer = false;\n    \n    public override string GetEntityType()\n    {\n        return EntityTypeName;\n    }\n\n    public override bool GetIsPlayer()\n    {\n        return IsPlayer;\n    }\n\n    public override void PopulateFromMonoBehaviour(MonoBehaviour monoBehaviour)\n    {\n    }\n}\n')),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties, this GameObject will also have a property in the state for this generated class.\nNote that this property name uses the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," attribute."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mockFieldlessState")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity_FieldlessState")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the FieldlessState MonoBehaviour on this GameObject.")))),(0,r.kt)("h3",{id:"3---rgstate-fieldpropertymethod-attribute"},"3 - ",(0,r.kt)("inlineCode",{parentName:"h3"},"[RGState]")," Field/Property/Method Attribute"),(0,r.kt)("p",null,"By adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," attribute to any field, property, or zero parameter methods with return values in a MonoBehaviour class in your project, ALL GameObjects with that MonoBehaviour attached will be included in the state."),(0,r.kt)("p",null,"Any MonoBehaviour using this attribute will be included in the state under a property named the same as the Behaviour's class name or the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," specified in its ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," attribute if it has that attribute."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," ",(0,r.kt)("strong",{parentName:"p"},"DOES NOT")," require using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]"),".  A generated class will still be created for your Behaviour with only ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," attributes present."),(0,r.kt)("p",{parentName:"admonition"},"You can use both attributes when you want to specify ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or want to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," used for the property name in the state.")),(0,r.kt)("p",null,"When this attribute is used in a class, a new source file will be autogenerated by Regression Games to represent this entity in the state.\nOnly fields, properties, or methods with this attribute specified will be included in the state."),(0,r.kt)("h4",{id:"rgstate-example-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"[RGState]")," Example 1"),(0,r.kt)("p",null,"This example shows using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," without using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]"),".  This example also overrides the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"CharacterType")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"charType"),"."),(0,r.kt)("p",null,"Source File: WandererState.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class WandererState : MonoBehaviour\n{\n    [RGState("charType")]\n    public string CharacterType()\n    {\n        return "Wanderer";\n    }\n\n    public int Health()\n    {\n        return 50;\n    }\n}\n')),(0,r.kt)("p",null,"Generated File: RGStateEntity_WandererState.Generated.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class RGStateEntity_WandererState : RGStateEntityBase\n{\n    public static readonly Type BehaviourType = typeof(WandererState);\n    public static readonly string EntityTypeName = "WandererState";\n    public static readonly bool IsPlayer = false;\n    \n    public override string GetEntityType()\n    {\n        return EntityTypeName;\n    }\n\n    public override bool GetIsPlayer()\n    {\n        return IsPlayer;\n    }\n\n    public override void PopulateFromMonoBehaviour(MonoBehaviour monoBehaviour)\n    {\n        var behaviour = (WandererState)monoBehaviour;\n        this["charType"] = behaviour.CharacterType();\n    }\n    \n    public string charType => (string)this["charType"];\n}\n')),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Health")," property is ",(0,r.kt)("strong",{parentName:"p"},"NOT")," included because it does not have an ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," attribute."),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties, this GameObject will also have a property in the state for this generated class."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WandererState")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity_WandererState")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the WandererState MonoBehaviour on this GameObject.")))),(0,r.kt)("h4",{id:"rgstate-example-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"[RGState]")," Example 2"),(0,r.kt)("p",null,"This example shows using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," while also using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]"),"."),(0,r.kt)("p",null,"Source File: NomadState.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[RGStateType("nomad")]\npublic class NomadState : MonoBehaviour\n{\n    public string CharacterType()\n    {\n        return "Nomad";\n    }\n\n    [RGState]\n    public int Health()\n    {\n        return 50;\n    }\n}\n')),(0,r.kt)("p",null,"Generated File: RGStateEntity_NomadState.Generated.cs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class RGStateEntity_NomadState : RGStateEntityBase\n{\n    public static readonly Type BehaviourType = typeof(NomadState);\n    public static readonly string EntityTypeName = "nomad";\n    public static readonly bool IsPlayer = false;\n    \n    public override string GetEntityType()\n    {\n        return EntityTypeName;\n    }\n\n    public override bool GetIsPlayer()\n    {\n        return IsPlayer;\n    }\n\n    public override void PopulateFromMonoBehaviour(MonoBehaviour monoBehaviour)\n    {\n        var behaviour = (NomadState)monoBehaviour;\n        this["Health"] = behaviour.Health();\n    }\n    \n    public string Health => (string)this["Health"];\n}\n')),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"CharacterType")," property is ",(0,r.kt)("strong",{parentName:"p"},"NOT")," included because it does not have an ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGState]")," attribute."),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties, this GameObject will also have a property in the state for this generated class."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nomad")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity_NomadState")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the NomadState MonoBehaviour on this GameObject.")))),(0,r.kt)("h3",{id:"4---rgactionbehaviour-monobehaviour"},"4 - ",(0,r.kt)("inlineCode",{parentName:"h3"},"RGActionBehaviour")," MonoBehaviour"),(0,r.kt)("p",null,"By adding a Behaviour that extends ",(0,r.kt)("inlineCode",{parentName:"p"},"RGActionBehaviour")," to a GameObject, that GameObject will be included in the state.\nUnless one of the other methods is also used, this will include only the ",(0,r.kt)("a",{parentName:"p",href:"#core-state-properties"},"core")," state properties of the GameObject and\na property with the name of class extending ",(0,r.kt)("inlineCode",{parentName:"p"},"RGActionBehaviour"),".  The value of the property will be ",(0,r.kt)("inlineCode",{parentName:"p"},"RGStateEntity_Empty")," which has no field accessors."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"RGActionBehaviour is an abstract class allowing for fully custom bot action implementations."),(0,r.kt)("p",{parentName:"admonition"},"It is currently available and used internally for handling button click actions, but is still under development and may be subject to change or breakage going forward.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../integrating-with-unity/defining-actions"},"Defining Actions")," for more information about defining actions."),(0,r.kt)("h3",{id:"5---rgaction-attribute"},"5 - ",(0,r.kt)("inlineCode",{parentName:"h3"},"[RGAction]")," Attribute"),(0,r.kt)("p",null,"By adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attribute to any method in a MonoBehaviour class in your project, ALL GameObjects with that MonoBehaviour attached will be included in the state."),(0,r.kt)("p",null,"Any MonoBehaviour using this attribute will be included in the state under a property named the same as the Behaviour's class name or the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," specified in its ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]")," attribute if it has that attribute."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"[RGAction]")," ",(0,r.kt)("strong",{parentName:"p"},"DOES NOT")," require using ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGStateType]"),".  Your Behaviour will still be included as a property in the state with only ",(0,r.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attributes present."),(0,r.kt)("p",{parentName:"admonition"},"You can use both attributes when you want to specify ",(0,r.kt)("inlineCode",{parentName:"p"},"isPlayer")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or want to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," used for this Behaviour in the state.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../integrating-with-unity/defining-actions"},"Defining Actions")," for more information about defining actions."))}c.isMDXComponent=!0}}]);