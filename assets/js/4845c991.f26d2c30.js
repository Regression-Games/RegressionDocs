"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[5983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return n?i.createElement(f,o(o({ref:t},d),{},{components:n})):i.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_label:"RGFindUtils"},o="RGFindUtils",l={unversionedId:"studios/unity/unity-sdk/RGFindUtils",id:"studios/unity/unity-sdk/RGFindUtils",title:"RGFindUtils",description:"RGFindUtils is a singleton providing a set of utility functions for finding GameObjects. This",source:"@site/docs/studios/unity/unity-sdk/RGFindUtils.mdx",sourceDirName:"studios/unity/unity-sdk",slug:"/studios/unity/unity-sdk/RGFindUtils",permalink:"/studios/unity/unity-sdk/RGFindUtils",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"RGFindUtils"},sidebar:"studiosSidebar",previous:{title:"RGAction",permalink:"/studios/unity/unity-sdk/RGAction"},next:{title:"Configuration",permalink:"/studios/unity/unity-sdk/creating-bots/configuration"}},s={},c=[{value:"<code>public T FindOneByInstanceId&lt;T&gt;(int instanceId) where T: MonoBehaviour</code>",id:"public-t-findonebyinstanceidtint-instanceid-where-t-monobehaviour",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Examples",id:"examples",level:4}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=d("Tabs"),p=d("TabItem"),m={toc:c},f="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rgfindutils"},"RGFindUtils"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RGFindUtils")," is a singleton providing a set of utility functions for finding GameObjects. This\nis extremely useful when implementing ",(0,r.kt)("a",{parentName:"p",href:"./RGAction"},(0,r.kt)("inlineCode",{parentName:"a"},"RGAction")),"s that need to find other GameObjects in the scene."),(0,r.kt)("p",null,"The instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"RGFindUtils")," is automatically created when the scene is loaded, and can be accessed\nwith the following function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"RGFindUtils.Instance\n")),(0,r.kt)("h1",{id:"class-methods"},"Class Methods"),(0,r.kt)("h3",{id:"public-t-findonebyinstanceidtint-instanceid-where-t-monobehaviour"},(0,r.kt)("inlineCode",{parentName:"h3"},"public T FindOneByInstanceId<T>(int instanceId) where T: MonoBehaviour")),(0,r.kt)("p",null,"Finds an object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," by its Instance ID. This Instance ID is the ID of the transform for that GameObject.\nThe type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is used to filter and cache objects in the scene of that type for efficient lookup."),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"instanceId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The instance ID of the GameObject to find. This is often the ID within the state given by")))),(0,r.kt)("p",null,"Regression Games."),(0,r.kt)("h4",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"The MonoBehaviour of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," that has been found in the scene on the GameObject within the given Instance ID."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(p,{value:"rg_action_example",label:"Start an action to follow another object",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public override void StartAction(Dictionary<string, object> input)\n{\n    var targetInstanceId = int.Parse(input["targetId"].ToString());\n\n    var targetObject = RGFindUtils.Instance.FindOneByInstanceId<RGState>(targetInstanceId);\n    if (targetObject != null)\n    {\n        // Set some class variable that is then used in the `Update()` function\n        targetTransform = targetObject.transform;\n    }\n}\n')))))}h.isMDXComponent=!0}}]);