"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[8366],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=u(n),p=r,g=c["".concat(s,".").concat(p)]||c[p]||m[p]||i;return n?a.createElement(g,l(l({ref:e},d),{},{components:n})):a.createElement(g,l({ref:e},d))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(t,e,n)=>{n.d(e,{Z:()=>l});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function l(t){let{children:e,hidden:n,className:l}=t;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},e)}},4866:(t,e,n)=>{n.d(e,{Z:()=>N});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),u=n(7392),d=n(12);function c(t){return function(t){return r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(t).map((t=>{let{props:{value:e,label:n,attributes:a,default:r}}=t;return{value:e,label:n,attributes:a,default:r}}))}function m(t){const{values:e,children:n}=t;return(0,r.useMemo)((()=>{const t=e??c(n);return function(t){const e=(0,u.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,n])}function p(t){let{value:e,tabValues:n}=t;return n.some((t=>t.value===e))}function g(t){let{queryString:e=!1,groupId:n}=t;const a=(0,o.k6)(),i=function(t){let{queryString:e=!1,groupId:n}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((t=>{if(!i)return;const e=new URLSearchParams(a.location.search);e.set(i,t),a.replace({...a.location,search:e.toString()})}),[i,a])]}function h(t){const{defaultValue:e,queryString:n=!1,groupId:a}=t,i=m(t),[l,o]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:n}=t;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((t=>t.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[s,u]=g({queryString:n,groupId:a}),[c,h]=function(t){let{groupId:e}=t;const n=function(t){return t?`docusaurus.tab.${t}`:null}(e),[a,i]=(0,d.Nk)(n);return[a,(0,r.useCallback)((t=>{n&&i.set(t)}),[n,i])]}({groupId:a}),k=(()=>{const t=s??c;return p({value:t,tabValues:i})?t:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((t=>{if(!p({value:t,tabValues:i}))throw new Error(`Can't select invalid tab value=${t}`);o(t),u(t),h(t)}),[u,h,i]),tabValues:i}}var k=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(t){let{className:e,block:n,selectedValue:o,selectValue:s,tabValues:u}=t;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),m=t=>{const e=t.currentTarget,n=d.indexOf(e),a=u[n].value;a!==o&&(c(e),s(a))},p=t=>{let e=null;switch(t.key){case"Enter":m(t);break;case"ArrowRight":{const n=d.indexOf(t.currentTarget)+1;e=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(t.currentTarget)-1;e=d[n]??d[d.length-1];break}}e?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},e)},u.map((t=>{let{value:e,label:n,attributes:l}=t;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,key:e,ref:t=>d.push(t),onKeyDown:p,onClick:m},l,{className:(0,i.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":o===e})}),n??e)})))}function y(t){let{lazy:e,children:n,selectedValue:a}=t;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const t=i.find((t=>t.props.value===a));return t?(0,r.cloneElement)(t,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==a}))))}function v(t){const e=h(t);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(b,(0,a.Z)({},t,e)),r.createElement(y,(0,a.Z)({},t,e)))}function N(t){const e=(0,k.Z)();return r.createElement(v,(0,a.Z)({key:String(e)},t))}},2011:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={sidebar_label:"Validation Bots"},s="Defining Bots for Validation Testing",u={unversionedId:"studios/unity/unity-sdk/creating-bots/javascript/validation-bots",id:"studios/unity/unity-sdk/creating-bots/javascript/validation-bots",title:"Defining Bots for Validation Testing",description:"Your Unity integration collects state information about GameObjects and notifies the Bot runtime with the updated state at a fixed tick interval.",source:"@site/docs/studios/unity/unity-sdk/creating-bots/javascript/validation-bots.mdx",sourceDirName:"studios/unity/unity-sdk/creating-bots/javascript",slug:"/studios/unity/unity-sdk/creating-bots/javascript/validation-bots",permalink:"/studios/unity/unity-sdk/creating-bots/javascript/validation-bots",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Validation Bots"},sidebar:"studiosSidebar",previous:{title:"PlayTest Bots",permalink:"/studios/unity/unity-sdk/creating-bots/javascript/playtest-bots"},next:{title:"Agent Builder",permalink:"/studios/unity/unity-sdk/creating-bots/javascript/agent-builder"}},d={},c=[{value:"Methods",id:"methods",level:2},{value:"<code>recordValidation(validationName: string, result: &quot;PASS&quot; | &quot;FAIL&quot; | &quot;WARNING&quot;, options);</code>",id:"recordvalidationvalidationname-string-result-pass--fail--warning-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>setCommandTimeout(timeout: number);</code>",id:"setcommandtimeouttimeout-number",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>setCommandRetryRate(retryRate: number);</code>",id:"setcommandretryrateretryrate-number",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"<code>waitForScene(sceneName: string);</code>",id:"waitforscenescenename-string",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Return Value",id:"return-value-3",level:4},{value:"Examples",id:"examples-3",level:4}],m={toc:c},p="wrapper";function g(t){let{components:e,...n}=t;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-bots-for-validation-testing"},"Defining Bots for Validation Testing"),(0,r.kt)("p",null,"Your Unity integration collects state information about GameObjects and notifies the Bot runtime with the updated state at a fixed tick interval.\nThe game state can be monitored to test the impacts of GameObject behaviors on other GameObjects."),(0,r.kt)("p",null,"Validation Bots share the same APIs as ",(0,r.kt)("a",{parentName:"p",href:"./playtest-bots"},"PlayTest Bots"),", with two important distinctions:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Bot logic is implemented within a ",(0,r.kt)("inlineCode",{parentName:"li"},"startScenario(rg)")," method rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"processTick(rg)"),".\n",(0,r.kt)("inlineCode",{parentName:"li"},"startScenario")," is invoked once after the Bot connects and will run to completion rather than being invoked repeatedly over the lifetime of the Bot.\nLike ",(0,r.kt)("inlineCode",{parentName:"li"},"processTick"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"rg")," object passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"startScenario")," exposes the Regression Games API."),(0,r.kt)("li",{parentName:"ol"},"Commands act as assertions. When a command is executed, it automatically waits and retries until the game state meets its expectations.\nIf an expectation hasn't been met before a timeout is reached, then the command (and by extension the scenario) will fail.\nFor example, running the command ",(0,r.kt)("inlineCode",{parentName:"li"},'rg.findEntity("MyEntity")')," for a PlayTest Bot will return the matching entity or null based on the current tick's game state,\nbut running the same command for a Validation Bot will check the state across several tick intervals until a matching entity is found, or else the command will fail.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This mode is useful for validation testing, where commands must be issued in a deterministic order\nand where the game state must meet the explicit expectations of one command before the next command is executed or else the scenario will fail.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This mode should not be used for Bots intended to make dynamic decisions based on the current game state,\nwhere a falsey result from a command should not cause the scenario to fail. ")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"startScenario_abilityBot",label:"Cycle through castable abilities",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'export function configureBot(rg) {\n    rg.lifecycle = "PERSISTENT";\n    rg.characterConfig = {\n        role: "HEALER"\n    };\n}\n\nexport async function startScenario(rg) {\n    \n    // validate that we\'re in the game\n    await rg.waitForScene("Dungeon");\n\n    // find the closest human player and use a heal ability on them\n    let target = await rg.findNearestEntity("HumanPlayer");\n    await rg.entityExists(target);\n\n    rg.performAction("Heal", {\n        targetId: target.id,\n        position: target.position\n    })\n\n    // validate that the heal recovers from cooldown\n    await rg.entityHasAttribute(rg.getBot(), ["abilityAvailable", "Heal"], true); \n\n    // find the closest enemy and use a basic attack until it dies.\n    // measure from the position of a known gameObject\n    target = await rg.findNearestEntity("Imp", await findEntity("Checkpoint").position);\n    await rg.entityExists(target);\n    await rg.entityHasAttribute(target, "health", 15);\n\n    // approach the entity\n    rg.performAction("ApproachObject", {\n        targetId: target.id,\n        range: 5,\n    });\n\n    // queue three attacks\n    // each one should do 5 damage\n    const args = {\n        targetId: target.id,\n        xPosition: target.position,\n    }\n    rg.performAction("BasicAttack", args)\n    await rg.entityHasAttribute(target, "health", 10);\n\n    rg.performAction("BasicAttack", args)\n    await rg.entityHasAttribute(target, "health", 5);\n\n    rg.performAction("BasicAttack", args)\n    await rg.entityDoesNotExist(target);\n\n    rg.complete();\n}\n'))),(0,r.kt)(l.Z,{value:"runTurn_menuBot",label:"Click buttons to start the game",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'export function configureBot(rg) {\n    rg.isSpawnable = false;\n    rg.lifecycle = "PERSISTENT";\n    rg.characterConfig = {};\n}\n\n/**\n * Clicks buttons to get us from the Main Menu into the dungeon.\n * Once we enter the dungeon, this Bot has completed its tasks.\n */\nexport async function startScenario(rg) {\n\n    // validate we\'re on the main menu\n    await rg.waitForScene("MainMenu");\n\n    // get to the character select screen\n    const profileMenuButton = await rg.findEntity("ProfileMenuButton");\n    await rg.entityHasAttribute(profileMenuButton, "interactable", true);\n    rg.performAction("ClickButton", {targetId: profileMenuButton.id});\n\n    const selectProfileButton = await rg.findEntity("SelectProfileButton");\n    await rg.entityHasAttribute(selectProfileButton, "interactable", true);\n    rg.performAction("ClickButton", {targetId: selectProfileButton.id});\n\n    const startWithRGButton = await rg.findEntity("StartWithRGButton");\n    await rg.entityHasAttribute(startWithRGButton, "interactable", true);\n    rg.performAction("ClickButton", {targetId: startWithRGButton.id});\n\n    // now we should be on a loading screen\n    await rg.waitForScene("LoadingScreen");\n\n    // select a character then enter the dungeon\n    const selectHealerButton = await rg.findEntity("SelectHealerButton");\n    await rg.entityHasAttribute(selectHealerButton, "interactable", true);\n    rg.performAction("ClickButton", {targetId: selectHealerButton.id});\n\n    const readyButton = await rg.findEntity("ReadyButton");\n    await rg.entityHasAttribute(readyButton, "interactable", true);\n    rg.performAction("ClickButton", {targetId: readyButton.id});\n\n    // we should be in the dungeon now\n    await rg.entityDoesNotExist(selectHealerButton);\n    await rg.entityDoesNotExist(readyButton);\n    await rg.waitForScene("Dungeon");\n\n    // we\'re done!\n    rg.complete();\n}\n')))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"These methods are in addition to the APIs defined in the ",(0,r.kt)("a",{parentName:"p",href:"./playtest-bots#variables"},"PlayTest Bots section"),"."),(0,r.kt)("h3",{id:"recordvalidationvalidationname-string-result-pass--fail--warning-options"},(0,r.kt)("inlineCode",{parentName:"h3"},'recordValidation(validationName: string, result: "PASS" | "FAIL" | "WARNING", options);')),(0,r.kt)("p",null,"Records a validation result that can later be seen in the Validations Dashboard. "),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"validationName")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The name or message of the test to show in the UI")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"PASS"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"FAIL"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"WARNING"')),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The result of the test")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional options for the validation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.icon")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"clock"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"heart"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"key"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sparkles"')),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The icon to show next to this validation in the Validations Dashboard")))),(0,r.kt)("h4",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"None"),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'rg.recordValidation("The character has a cooldown after using an ability", "PASS", {icon: "key"})\nrg.recordValidation("The character does not get stuck in the same spot for more than 30 seconds", "FAIL", {icon: "clock"})\nrg.recordValidation("The character cannot move while attacking", "WARNING", {icon: "heart"})\n')),(0,r.kt)("h3",{id:"setcommandtimeouttimeout-number"},(0,r.kt)("inlineCode",{parentName:"h3"},"setCommandTimeout(timeout: number);")),(0,r.kt)("p",null,"Sets the total time in milliseconds a command is allowed to sped waiting/retrying before it fails.\nThis timeout should take into consideration how often your Unity Integration is configured to send the game state."),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeout")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The new command timeout in milliseconds")))),(0,r.kt)("h4",{id:"return-value-1"},"Return Value"),(0,r.kt)("p",null,"No return value"),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"rg.setCommandTimeout(5000);\n")),(0,r.kt)("h3",{id:"setcommandretryrateretryrate-number"},(0,r.kt)("inlineCode",{parentName:"h3"},"setCommandRetryRate(retryRate: number);")),(0,r.kt)("p",null,"Sets how long in milliseconds a command should wait before retrying following a failure."),(0,r.kt)("h4",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"retryRate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The new command retry rate in milliseconds")))),(0,r.kt)("h4",{id:"return-value-2"},"Return Value"),(0,r.kt)("p",null,"No return value"),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"rg.setCommandRetryRate(200);\n")),(0,r.kt)("h3",{id:"waitforscenescenename-string"},(0,r.kt)("inlineCode",{parentName:"h3"},"waitForScene(sceneName: string);")),(0,r.kt)("p",null,"Wait until the current scene name matches the expected value."),(0,r.kt)("h4",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sceneName")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the scene to wait for")))),(0,r.kt)("h4",{id:"return-value-3"},"Return Value"),(0,r.kt)("p",null,"Promise","<","void",">"),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'await rg.waitForScene("StartupScreen");\nawait rg.waitForScene("UpdaterSplash");\nawait rg.waitForScene("MainMenu")\n')))}g.isMDXComponent=!0}}]);