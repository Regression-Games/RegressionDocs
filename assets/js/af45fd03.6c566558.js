"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[5508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_label:"Custom Bots and Discoverers"},r="Custom Bots and Discoverers",s={unversionedId:"automated-testing/creating-custom-components",id:"automated-testing/creating-custom-components",title:"Custom Bots and Discoverers",description:"If the built-in Bot and Discoverer components aren't sufficient for your testing needs, you can also create your own with just a few steps and some code.",source:"@site/docs/automated-testing/creating-custom-components.mdx",sourceDirName:"automated-testing",slug:"/automated-testing/creating-custom-components",permalink:"/automated-testing/creating-custom-components",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Custom Bots and Discoverers"},sidebar:"automatedTesting",previous:{title:"GPT Assistant Bot",permalink:"/automated-testing/gpt-assistant-bot"}},l={},c=[{value:"Building a Custom Discoverer",id:"building-a-custom-discoverer",level:2},{value:"What is an Entity?",id:"what-is-an-entity",level:3},{value:"Creating a Discoverer",id:"creating-a-discoverer",level:3},{value:"Adding the discoverer to the scene",id:"adding-the-discoverer-to-the-scene",level:3},{value:"Building a Custom Bot",id:"building-a-custom-bot",level:2},{value:"Adding your Bot to the scene",id:"adding-your-bot-to-the-scene",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(p,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-bots-and-discoverers"},"Custom Bots and Discoverers"),(0,i.kt)("p",null,"If the built-in Bot and Discoverer components aren't sufficient for your testing needs, you can also create your own with just a few steps and some code."),(0,i.kt)("h2",{id:"building-a-custom-discoverer"},"Building a Custom Discoverer"),(0,i.kt)("p",null,"Entity Discoverers are used to find entities in the scene that should be made available to automation.\nThe built-in UI Element Discoverer is one example of an Entity Discoverer.\nIt scans the scene for certain UI Elements (Buttons, Canvas Groups, etc.) and makes them available as entities.\nIf your game has other entities you want to be able to automate, you can build an Entity Discoverer that will find them and provide information about their State and available Actions."),(0,i.kt)("h3",{id:"what-is-an-entity"},"What is an Entity?"),(0,i.kt)("p",null,"An Entity represents a component in the scene that can be automated by a bot.\nWhen the bot executes, it is given access to a list of Entities in the scene.\nSince the bot is a GameObject, it doesn't have to be limited to interacting with Entities,\nbut Entities represent things that are ",(0,i.kt)("strong",{parentName:"p"},"specifically intended")," to be automated by a bot.\nUsually, an Entity maps to a single GameObject, but there's no requirement that there be an underlying GameObject for every entity.\nA single GameObject may be represented by multiple Entities, or an Entity may not be related to any GameObject at all."),(0,i.kt)("p",null,"Entities have a very simple structure.\nThey are represented by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An ID that must be unique across all entity instances in the game"),(0,i.kt)("li",{parentName:"ul"},"A name, usually derived from the GameObject name, that does not need to be unique."),(0,i.kt)("li",{parentName:"ul"},"A type, which is usually derived from the .NET Type Name of the Component backing the entity."),(0,i.kt)("li",{parentName:"ul"},"A description, which can be presented to users, ",(0,i.kt)("strong",{parentName:"li"},"or")," to Large Language Models (LLMs) to assist in understanding the purpose of the entity."),(0,i.kt)("li",{parentName:"ul"},"A set of States representing relevant properties of the entity"),(0,i.kt)("li",{parentName:"ul"},"A set of Actions representing things the bot can ",(0,i.kt)("em",{parentName:"li"},"do")," with the entity.")),(0,i.kt)("p",null,"A State is a simple key/value pair that represents some value that will be relevant to a bot.\nFor example, a Canvas Group exposes its ",(0,i.kt)("inlineCode",{parentName:"p"},"interactable")," property as a state value, to allow a bot to identify if the group is interactable."),(0,i.kt)("p",null,"An Action is a function that can be called on the Entity itself.\nFor example, a Button exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"click"),' action.\nWhen this action is called, a synthetic "click" event will be raised on the button and the appropriate handlers will run as if a user clicked the button.'),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Currently, Actions cannot take parameters. This will change in the future!")),(0,i.kt)("h3",{id:"creating-a-discoverer"},"Creating a Discoverer"),(0,i.kt)("p",null,"To create a discoverer, create a new C# Script somewhere in your game (we recommend ",(0,i.kt)("inlineCode",{parentName:"p"},"Assets/Scripts/Automation"),").\nChange the script class to inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"RegressionGames.Unity.Discovery.EntityDiscoverer")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using RegressionGames.Unity.Discovery;\n\nnamespace MyGame\n{\n    public class MyCustomDiscoverer : EntityDiscoverer\n    {\n    }\n}\n")),(0,i.kt)("p",null,"An Entity Discoverer is a Unity component like any other, so if you want, you can provide handlers for any of Unity's events (",(0,i.kt)("inlineCode",{parentName:"p"},"Awake"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", etc.).\nHowever, the base class provides a basic pattern we recommend following if you can.\nOverride the ",(0,i.kt)("inlineCode",{parentName:"p"},"DiscoverEntities")," method, and have it return an ",(0,i.kt)("inlineCode",{parentName:"p"},"IEnumerable<AutomationEntity>")," representing all the entities discovered in the current scene.\nFor example, this is the ",(0,i.kt)("inlineCode",{parentName:"p"},"DiscoverEntities")," implementation used by the UI Element Discoverer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'protected override IEnumerable<AutomationEntity> DiscoverEntities()\n{\n    m_Log.Verbose("Scanning for UI elements...");\n    var uiBehaviours = FindAutomatableComponentsOfType<Selectable>();\n    foreach (var uiBehaviour in uiBehaviours)\n    {\n        yield return new UISelectableEntity(uiBehaviour);\n    }\n\n    var canvasGroups = FindAutomatableComponentsOfType<CanvasGroup>();\n    foreach (var canvasGroup in canvasGroups)\n    {\n        yield return new UIGroupEntity(canvasGroup);\n    }\n}\n')),(0,i.kt)("p",null,"A few important pieces here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FindAutomatableComponentsOfType<T>")," is a method provided by the ",(0,i.kt)("inlineCode",{parentName:"li"},"EntityDiscoverer")," base class. It searches the entire scene for objects of the specified type ",(0,i.kt)("strong",{parentName:"li"},"but")," excludes any objects or hierarchies which have disabled Automation using the ",(0,i.kt)("inlineCode",{parentName:"li"},"Automatable")," component."),(0,i.kt)("li",{parentName:"ul"},"We use C#'s ",(0,i.kt)("inlineCode",{parentName:"li"},"yield return")," syntax, which allows us to build an ",(0,i.kt)("inlineCode",{parentName:"li"},"IEnumerable")," by emitting the individual objects and letting the compiler do the work of creating the ",(0,i.kt)("inlineCode",{parentName:"li"},"IEnumerable")," itself."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UISelectableEntity")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"UIGroupEntity")," are custom classes inheriting from ",(0,i.kt)("inlineCode",{parentName:"li"},"RegressionGames.Unity.Automation.AutomationEntity"),". In your custom discoverer, you'll want to provide your own implementations of that class.")),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"DiscoverEntities")," method will be called ",(0,i.kt)("strong",{parentName:"p"},"automatically"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"During the ",(0,i.kt)("inlineCode",{parentName:"li"},"Awake")," event handler, unless you override it and don't call the base class method."),(0,i.kt)("li",{parentName:"ul"},"Whenever the active scene changes, again unless you override ",(0,i.kt)("inlineCode",{parentName:"li"},"Awake")," and don't call the base class method.")),(0,i.kt)("p",null,"In addition to this, you can create new entities from any other event handler.\nWhen you have a new entity to register, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterEntity")," method provided by the base class.\nThis method will register the entity ",(0,i.kt)("strong",{parentName:"p"},"and")," set up ",(0,i.kt)("inlineCode",{parentName:"p"},"OnDestroy")," logic to unregister the entity when the discoverer is destroyed.\nFor example, if you want to discover entities in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Update")," handler, you could write something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"void Update()\n{\n    var enemies = FindAutomatableComponentsOfType<Enemy>();\n    foreach(var enemy in enemies)\n    {\n        var enemyEntity = new EnemyEntity(enemy);\n        RegisterEntity(enemyEntity);\n    }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you are registering entities every frame, it's up to you to make sure you don't register the same entity twice!\nAlso, be aware of the performance impact of scanning the entire scene for entities on every frame")),(0,i.kt)("h3",{id:"adding-the-discoverer-to-the-scene"},"Adding the discoverer to the scene"),(0,i.kt)("p",null,"To add your discoverer to a scene, create an empty GameObject ",(0,i.kt)("strong",{parentName:"p"},"as a child of the Automation Controller"),".\nAttach your discoverer component to that GameObject."),(0,i.kt)("h2",{id:"building-a-custom-bot"},"Building a Custom Bot"),(0,i.kt)("p",null,"To create a custom bot, start in your game, with the Automated UI Testing package installed.\nWe recommend completing the ",(0,i.kt)("a",{parentName:"p",href:"/automated-testing/getting-started"},"Getting Started Guide")," first, so you have everything set up properly."),(0,i.kt)("p",null,"To create a bot, create a new C# Script somewhere in your game (we recommend ",(0,i.kt)("inlineCode",{parentName:"p"},"Assets/Scripts/Automation"),").\nChange the script class to inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"RegressionGames.Unity.Automation.Bot"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using RegressionGames.Unity.Automation;\n\nnamespace MyGame\n{\n    public class MyBot : Bot\n    {\n    }\n}\n")),(0,i.kt)("p",null,"As with discoverers, Bots are Components that exist in the standard Unity object hierarchy.\nSo, you can handle any of the Unity lifecycle events (",(0,i.kt)("inlineCode",{parentName:"p"},"Awake"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", etc.).\nWithin your bot, the ",(0,i.kt)("inlineCode",{parentName:"p"},"AutomationController")," property will be present and allows you to access all the discovered entities in the scene.\nFor example, here's a snippet from the Monkey Bot code that shows how it finds and selects a random entity, then executes a random action on that entity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'void Update()\n{\n    // ...\n    var availableActions = AutomationController.Entities\n        .SelectMany(e => e.Actions.Values)\n        .Where(a => a.CanActivateThisFrame())\n        .ToList();\n\n    if (availableActions.Count == 0)\n    {\n        m_Log.Verbose("No actions available this frame.");\n        return;\n    }\n\n    // Select a random action and activate it.\n    var action = availableActions[Random.Range(0, availableActions.Count)];\n    action.Activate();\n    // ...\n}\n')),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If you choose to handle the ",(0,i.kt)("inlineCode",{parentName:"p"},"Awake")," event, make sure you do so by overriding the base class method and call it first.\nFor example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"protected override void Awake()\n{\n    base.Awake();\n    // Your custom awake logic here...\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"If you fail to do so, the ",(0,i.kt)("inlineCode",{parentName:"p"},"AutomationController")," property will not be properly initialized!")),(0,i.kt)("h3",{id:"adding-your-bot-to-the-scene"},"Adding your Bot to the scene"),(0,i.kt)("p",null,"Your bot is active whenever it's on an active GameObject in the scene.\nSo there are several ways to add it to your scene.\nWe recommend creating a Prefab and attaching the Bot component to that prefab:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A Unity Prefab showing the &quot;My Bot (Script)&quot; component added",src:n(8115).Z,width:"830",height:"784"})),(0,i.kt)("p",null,"Then, you can add that Prefab to the ",(0,i.kt)("inlineCode",{parentName:"p"},"availableBots")," property on the RegressionGames UI Overlay,\nwhich will add it to the dropdown of bots that can be spwaned in the UI overlay."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A recording showing the user draggin the &quot;MyBot&quot; prefab on to the &quot;Available Bots&quot; list in the &quot;Overlay Menu&quot; section of a game object",src:n(6175).Z,width:"640",height:"172"})))}d.isMDXComponent=!0},8115:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/bot-prefab-003a840cd7031d4c552e4224314e7200.png"},6175:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/recording-add-custom-bot-to-overlay-43e86e9fc7220613d0f4af272654d850.gif"}}]);