"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[2069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(g,r(r({ref:t},u),{},{components:n})):o.createElement(g,r({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(7294),a=n(6010);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,r),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>G});var o=n(7462),a=n(7294),i=n(6010),r=n(2466),c=n(6550),l=n(1980),s=n(7392),u=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const o=(0,c.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=d(e),[r,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:i}))),[l,s]=g({queryString:n,groupId:o}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,u.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),f=(()=>{const e=l??p;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{f&&c(f)}),[f]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),s(e),b(e)}),[s,b,i]),tabValues:i}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:c,selectValue:l,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),o=s[n].value;o!==c&&(p(t),l(o))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},r,{className:(0,i.Z)("tabs__item",y.tabItem,r?.className,{"tabs__item--active":c===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function k(e){const t=b(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},a.createElement(h,(0,o.Z)({},e,t)),a.createElement(v,(0,o.Z)({},e,t)))}function G(e){const t=(0,f.Z)();return a.createElement(k,(0,o.Z)({key:String(t)},e))}},4228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905)),i=n(4866),r=n(5162);const c={sidebar_label:"Defining Actions"},l="Defining Actions",s={unversionedId:"integrating-with-unity/defining-actions",id:"integrating-with-unity/defining-actions",title:"Defining Actions",description:'This section refers to an "action" as any instruction that a bot can issue to its GameObject.',source:"@site/docs/integrating-with-unity/defining-actions.mdx",sourceDirName:"integrating-with-unity",slug:"/integrating-with-unity/defining-actions",permalink:"/integrating-with-unity/defining-actions",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Defining Actions"},sidebar:"unitySidebar",previous:{title:"Defining States",permalink:"/integrating-with-unity/defining-states"},next:{title:"BotInformation",permalink:"/integrating-with-unity/BotInformation"}},u={},p=[{value:"Using the <code>[RGAction]</code> Attribute",id:"using-the-rgaction-attribute",level:2},{value:"<code>[RGAction]</code> Code Generation Example",id:"rgaction-code-generation-example",level:3},{value:"Invoking Actions from Bot code",id:"invoking-actions-from-bot-code",level:3}],d={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-actions"},"Defining Actions"),(0,a.kt)("p",null,'This section refers to an "action" as any instruction that a bot can issue to its GameObject.\nThis can be anything from movement to casting abilities to navigating UI components.'),(0,a.kt)("p",null,"It is common for actions to interact with entities in the ",(0,a.kt)("a",{parentName:"p",href:"./defining-states"},"game state")," and their corresponding GameObjects."),(0,a.kt)("h2",{id:"using-the-rgaction-attribute"},"Using the ",(0,a.kt)("inlineCode",{parentName:"h2"},"[RGAction]")," Attribute"),(0,a.kt)("p",null,"Defining an action is as simple as adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attribute to a method.\nThis allows the Regression Games SDK to recognize this method as the entrypoint into a callable action from your bot code (",(0,a.kt)("a",{parentName:"p",href:"../creating-bots/csharp/configuration"},"C#"),") (",(0,a.kt)("a",{parentName:"p",href:"../creating-bots/javascript/configuration"},"JavaScript"),")."),(0,a.kt)("p",null,"When this attribute is used in a class, a new source file will be autogenerated by Regression Games to handle calling this action on a target GameObject."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attribute must be used within a component, a class that inherits from ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),", or a class whose parent inherits from ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoBehaviour"),".")),(0,a.kt)("p",null,"By default, the action's name matches the method's, but this can be overridden by passing a different name to ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]"),".\nAction names must be unique within your Unity project."),(0,a.kt)("p",null,"Any parameters that the method accepts will be valid arguments in your bot code.\nArgument names and data types in the bot code must match those expected by the action."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"action_with_default_name",label:"RGAction",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'// This is called using the name "OpenContainer"\n\n[RGAction]\npublic void OpenContainer(bool isLocked)\n{\n    // Your logic here\n}\n'))),(0,a.kt)(r.Z,{value:"action_with_name",label:"RGAction with Overridden Name",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'// This is called using the name "Open Chest"\n\n[RGAction("Open Chest")]\npublic void OpenContainer(bool isLocked)\n{\n    // Your logic here\n}\n')))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attribute is designed for ease of integration.\nA method with this attribute may execute an action from start to finish, or it may start an action that ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoBehaviour")," methods such as ",(0,a.kt)("inlineCode",{parentName:"p"},"FixedUpdate")," should complete.\nDepending on how your code is structured, you may be able to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"RGAction")," attribute to your existing code with minimal refactoring."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"complete_action",label:"RGAction Completes the Action",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class Player : MonoBehaviour\n{\n    public float jumpPower = 10f;\n    private RigidBody _rigidbody;\n\n    void Start()\n    {\n        _rigidbody = GetComponent<Rigidbody>();\n    }\n\n    [RGAction]\n    public void Jump()\n    {\n        _rigidbody.AddForce(Vector3.up * jumpPower, ForceMode.Impulse);\n    }\n}\n"))),(0,a.kt)(r.Z,{value:"action_with_update",label:"RGAction Starts the Action",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class Player : MonoBehaviour\n{\n    public float speed = 100f;\n    public float range = 1f;\n    private RigidBody _rigidbody;\n    private Vector3? _targetPosition;\n\n    void Start()\n    {\n        _rigidbody = GetComponent<Rigidbody>();\n    }\n\n    public void Update()\n    {\n        // If we are in range, reset the action\n        if (targetPosition != null && Vector3.Distance((Vector3) targetPosition, transform.position) < range)\n        {\n            targetPosition = null;\n        }\n\n        // Set the target velocity\n        if (targetPosition != null)\n        {\n            Vector3 direction = ((Vector3)targetPosition - transform.position).normalized;\n            direction.y = 0;\n            float force = speed * Time.deltaTime;\n            _rigidbody.AddForce(direction * force);\n        }\n    }\n\n    [RGAction]\n    public void MoveToPosition(float x, float y, float z)\n    {\n        targetPosition = new Vector3(x, y, z);\n    }\n}\n")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For C# bots, we have full support for non-primitive types for ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," parameters."),(0,a.kt)("p",{parentName:"admonition"},"For Javascript bots, we recommend using primitive data types for ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," parameters.\nIf your Javascript bot needs to call a method with non-primitive parameters, consider using a proxy method:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"// Proxy method for the AttackPlayer action\n[RGAction]\npublic void AttackPlayerProxy(int playerId)\n{\n    var playerGameObject = RGFindUtils.Instance.FindOneByInstanceId(playerId);\n    AttackPlayer(playerGameObject);\n}\n\n// The method we want to expose as an action\nprivate void AttackPlayer(GameObject player)\n{\n  // your implementation here...\n}\n"))),(0,a.kt)("h1",{id:"invoking-an-rgaction-on-a-gameobject"},"Invoking an ",(0,a.kt)("inlineCode",{parentName:"h1"},"RGAction")," on a GameObject"),(0,a.kt)("p",null,"As mentioned above, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"[RGAction]")," attribute causes Regression Games to generate a new code class for handling invoking actions\nfor that MonoBehaviour."),(0,a.kt)("p",null,"One of the generated classes is an ",(0,a.kt)("inlineCode",{parentName:"p"},"RGActionRequest")," which can be used by your bot code to quickly invoke an action on a specific game object."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that by default you can only invoke actions on GameObjects for bots owned by your client id, or on global action\nhandlers registered on the Regression Games overlay."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"Clicking UI buttons is a global action handler available by default on the overlay.  Clicking a button is included in the example below."))),(0,a.kt)("h3",{id:"rgaction-code-generation-example"},(0,a.kt)("inlineCode",{parentName:"h3"},"[RGAction]")," Code Generation Example"),(0,a.kt)("p",null,"Source File: Player.cs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public class Player : MonoBehaviour\n{\n    public float speed = 100f;\n    public float range = 1f;\n    private RigidBody _rigidbody;\n    private Vector3? _targetPosition;\n\n    void Start()\n    {\n        _rigidbody = GetComponent<Rigidbody>();\n    }\n\n    public void Update()\n    {\n        // If we are in range, reset the action\n        if (targetPosition != null && Vector3.Distance((Vector3) targetPosition, transform.position) < range)\n        {\n            targetPosition = null;\n        }\n\n        // Set the target velocity\n        if (targetPosition != null)\n        {\n            Vector3 direction = ((Vector3)targetPosition - transform.position).normalized;\n            direction.y = 0;\n            float force = speed * Time.deltaTime;\n            _rigidbody.AddForce(direction * force);\n        }\n    }\n\n    [RGAction]\n    public void MoveToPosition(float x, float y, float z)\n    {\n        targetPosition = new Vector3(x, y, z);\n    }\n}\n")),(0,a.kt)("p",null,"Generated File: Generated_RGActions_Player.cs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'    public class RGActions_Player : IRGActions\n    {\n        public static readonly Type BehaviourType = typeof(Player);\n        public static readonly string EntityTypeName = "Player";\n        public static readonly IDictionary<string, Delegate> ActionRequestDelegates = new ReadOnlyDictionary<string, Delegate>(new Dictionary<string, Delegate>()\n        {\n            {RGActionRequest_Player_MoveToPosition.ActionName, new Action<GameObject, RGActionRequest>(RGAction_Player_MoveToPosition.InvokeOnGameObject)} \n        });\n    }\n\n    public class RGActionRequest_Player_MoveToPosition : RGActionRequest\n    {\n        public RGActionRequest_Player_MoveToPosition(float x, float y, float z): base("MoveToPosition")\n        {\n            Input["x"] = x;\n            Input["y"] = y;\n            Input["z"] = z;\n        }\n\n        public static readonly string EntityTypeName = "Player";\n        public static readonly string ActionName = "MoveToPosition";\n        public float x => (float)Input!["x"];\n        public float y => (float)Input!["y"];\n        public float z => (float)Input!["z"];\n    }\n\n    public class RGAction_Player_MoveToPosition : IRGAction\n    {\n        public static void InvokeOnGameObject(GameObject gameObject, RGActionRequest actionRequest)\n        {\n            // optimize this for local C# bots to avoid all the conversions/etc\n            if (actionRequest is RGActionRequest_Player_MoveToPosition myActionRequest)\n            {\n                InvokeOnGameObject(gameObject, myActionRequest.x, myActionRequest.y, myActionRequest.z);\n            }\n            else\n            {\n                InvokeOnGameObject(gameObject, actionRequest.Input);\n            }\n        }\n\n        private static void InvokeOnGameObject(GameObject gameObject, Dictionary<string, object> input)\n        {\n            float x = default;\n            if (input.TryGetValue("x", out var xInput))\n            {\n                try\n                {\n                    float.TryParse(xInput.ToString(), out x);\n                }\n                catch (Exception ex)\n                {\n                    RGDebug.LogError($"Failed to parse \'x\' - {ex}");\n                }\n            }\n            else\n            {\n                RGDebug.LogError("No parameter \'x\' found");\n                return;\n            }\n\n            float y = default;\n            if (input.TryGetValue("y", out var yInput))\n            {\n                try\n                {\n                    float.TryParse(yInput.ToString(), out y);\n                }\n                catch (Exception ex)\n                {\n                    RGDebug.LogError($"Failed to parse \'y\' - {ex}");\n                }\n            }\n            else\n            {\n                RGDebug.LogError("No parameter \'y\' found");\n                return;\n            }\n\n            float z = default;\n            if (input.TryGetValue("z", out var zInput))\n            {\n                try\n                {\n                    float.TryParse(zInput.ToString(), out z);\n                }\n                catch (Exception ex)\n                {\n                    RGDebug.LogError($"Failed to parse \'z\' - {ex}");\n                }\n            }\n            else\n            {\n                RGDebug.LogError("No parameter \'z\' found");\n                return;\n            }\n\n            InvokeOnGameObject(gameObject, x, y, z);\n        }\n\n        private static void InvokeOnGameObject(GameObject gameObject, params object[] args)\n        {\n            var monoBehaviour = gameObject.GetComponent<Player>();\n            if (monoBehaviour == null)\n            {\n                //TODO (REG-1420): It would be nice if we could link them to the exact game object in the scene quickly.\n                RGDebug.LogError($"Error: Regression Games internal error... Somehow RGAction: MoveToPosition got registered on a GameObject where MonoBehaviour: Player does not exist.");\n                return;\n            }\n\n            monoBehaviour.MoveToPosition((float)args[0], (float)args[1], (float)args[2]);\n        }\n    }\n')),(0,a.kt)("h3",{id:"invoking-actions-from-bot-code"},"Invoking Actions from Bot code"),(0,a.kt)("p",null,"To invoke the ",(0,a.kt)("inlineCode",{parentName:"p"},"RGActionRequest_Player_MoveToPosition")," from your bot, your bot code would look something like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'    public class BotEntryPoint : RGUserBot\n    {\n        protected override bool GetIsSpawnable()\n        {\n            return false;\n        }\n\n        protected override RGBotLifecycle GetBotLifecycle()\n        {\n            return RGBotLifecycle.PERSISTENT;\n        }\n\n        public override void ConfigureBot(RG rgObject)\n        {\n            rgObject.CharacterConfig = new Dictionary<string, object>() {\n                { "characterType", "Mage" }\n            };\n        }\n\n        public override void ProcessTick(RG rgObject)\n        {\n            switch (rgObject.SceneName)\n            {\n                case "CharSelect":\n                    var readyButton = rgObject.GetInteractableButtonByScenePath("/CharacterSelectCanvas/ClassInfoBox/DecorativeFrame/Ready Btn");\n                    if (readyButton != null)\n                    {\n                        rgObject.PerformAction(new RGActionRequest_ClickButton(readyButton.id));\n                    }\n                    break;\n                case "BossRoom":\n                    try\n                    {\n                        var entities = rgObject.AllEntities();\n                        if (entities.Count > 0)\n                        {\n                            var target = entities[new Random().Next(entities.Count)];\n                            var targetPosition = target.position;\n                            var action = new RGActionRequest_Player_MoveToPosition(\n                                targetPosition.x,\n                                targetPosition.y,\n                                targetPosition.z\n                            );\n                            rgObject.PerformAction(action);\n                        }\n                        else\n                        {\n                            RGDebug.LogWarning("No entities found...");\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        RGDebug.LogError($"Error getting target position: {ex}");\n                    }\n\n                    break;\n                case "PostGame":\n                default:\n                    // teardown myself\n                    rgObject.Complete();\n                    break;\n            }\n        }\n        \n    }\n')))}g.isMDXComponent=!0}}]);