"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[4998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),o=n(6010),i=n(2466),s=n(6550),c=n(1980),l=n(7392),u=n(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=p(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,l]=h({queryString:n,groupId:r}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=c??d;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),f(e)}),[l,f,o]),tabValues:o}}var b=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),r=l[n].value;r!==s&&(d(t),c(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=f(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return a.createElement(k,(0,r.Z)({key:String(t)},e))}},740:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),i=n(5162);const s={sidebar_label:"Creating Adaptive Bots"},c="Defining Bots that Adapt to the Game State",l={unversionedId:"creating-bots/csharp/adaptive-bots",id:"creating-bots/csharp/adaptive-bots",title:"Defining Bots that Adapt to the Game State",description:"Your Unity integration collects state information about GameObjects and notifies the Bot runtime with the updated state at a fixed tick interval.",source:"@site/docs/creating-bots/csharp/adaptive-bots.mdx",sourceDirName:"creating-bots/csharp",slug:"/creating-bots/csharp/adaptive-bots",permalink:"/creating-bots/csharp/adaptive-bots",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Creating Adaptive Bots"},sidebar:"unitySidebar",previous:{title:"Configuration",permalink:"/creating-bots/csharp/configuration"},next:{title:"Scenario Testing",permalink:"/creating-bots/csharp/scenario-testing"}},u={},d=[],p={toc:d},m="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-bots-that-adapt-to-the-game-state"},"Defining Bots that Adapt to the Game State"),(0,a.kt)("p",null,"Your Unity integration collects state information about GameObjects and notifies the Bot runtime with the updated state at a fixed tick interval.\nWhenever the Bot runtime receives an update, Regression Games calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"ProcessTick(RG rgObject)")," method.\nThis is Regression Games' entrypoint into your Bot logic, where you will describe how your Bot makes decisions and reacts to the current game state."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"RG")," object passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"ProcessTick")," exposes the Regression Games API which contains methods for evaluating the game state and queueing behaviors that you've defined as an ",(0,a.kt)("inlineCode",{parentName:"p"},"RGAction"),".\nThis API is defined in the sections below."),(0,a.kt)("p",null,"In-game state and ",(0,a.kt)("inlineCode",{parentName:"p"},"RGAction")," usages are automatically recorded during each session.\nThese logs can be loaded into the Unity Bot Replay utility which allows you to re-watch the session and debug Bot behaviors tick-by-tick.\nAPI methods that filter state objects and check conditions will record additional decision results.\nThese are displayed side-by-side with Bot actions in the Replay utility to help debug your Bot by showing which decisons led to resulting behaviors.  "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you are using the ",(0,a.kt)("a",{parentName:"p",href:"../../integrating-with-unity/defining-actions"},(0,a.kt)("inlineCode",{parentName:"a"},"[RGAction]")," attribute")," to generate your actions, then there are also typed ",(0,a.kt)("inlineCode",{parentName:"p"},"RGActionRequest")," classes generated for that action.  The snippets below provide examples for using both typed and untyped actions.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Commands within ",(0,a.kt)("inlineCode",{parentName:"p"},"ProcessTick")," interact with the game state represented by the current tick only.\nThis contrasts with ",(0,a.kt)("a",{parentName:"p",href:"./scenario-testing"},"Scenario Bots"),", which can delay execution of commands for several ticks until expected conditions are met.")),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"runTurn_coopBot",label:"Follow and support a human player as an NPC",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'public override void ConfigureBot(RG rgObject)\n{\n    rgObject.CharacterConfig = new Dictionary<string, object>() {\n        { "role", "Warrior" }\n    };\n}\n\n/**\n * Outline of our Bot algorithm. For every tick:\n *  - If the Bot is standing on a switch that is holding a door open, then do nothing\n *  - If the switch is within a range of sqrt(30) units from the Bot, move onto the switch\n *  - If the Bot is not near the player, move within range of the player\n *  - If an enemy is within a certain distance of a player, attack that enemy\n */\npublic override void ProcessTick(RG rgObject)\n{\n\n    if (rgObject.SceneName != "Dungeon")\n    {\n        return;\n    }\n\n    var currentPosition = (Vector3)rgObject.GetMyPlayers()[0].position;\n\n    var floorSwitch = rgObject.FindEntities("FloorSwitch");\n    if (floorSwitch.Count > 0 && rgObject.EntityHasAttribute(floorSwitch[0], "isOn", true))\n    {\n        return;\n    }\n\n    if (floorSwitch.Count > 0 && MathFunctions.DistanceSq(currentPosition, (Vector3)floorSwitch[0].position) < 30)\n    {\n        return;\n    }\n\n    var humanPlayer = rgObject.FindEntities("HumanPlayer");\n    if (humanPlayer.Count > 0 &&\n        MathFunctions.DistanceSq(currentPosition, (Vector3)humanPlayer[0].position) > 10)\n    {\n        // Untyped action request\n        rgObject.PerformAction(new RGActionRequest("ApproachObject", new Dictionary<string, object>()\n        {\n            { "targetId", humanPlayer[0].id },\n            { "range", 2}\n        }));\n    }\n\n    var enemy = rgObject.FindNearestEntity(null, currentPosition,\n        (entity) => 1.Equals(entity.GetField("team")) && !true.Equals(entity.GetField("broken")));\n    if (enemy != null && 0.CompareTo(enemy.GetField("Health")) < 0)\n    {\n        /*\n         * Typed action request\n         *\n         *  Using Generated Class ...\n            public class RGActionRequest_PerformSkill : RGActionRequest\n            {\n                public RGActionRequest_PerformSkill(int skillId, int targetId, Vector3 position)\n                {\n                    action = "PerformSkill";\n                    Input = new ()\n                    {{"skillId", skillId}, {"targetId", targetId}, {"position", position}, };\n                }\n            } \n         *\n         */\n        rgObject.PerformAction(new RGActionRequest_PerformSkill(1, enemy.id, enemy.position));\n    }\n}\n'))),(0,a.kt)(i.Z,{value:"runTurn_menuBot",label:"Click buttons to start the game",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'protected override bool GetIsSpawnable()\n{\n    return false;\n}\n\nprotected override RGBotLifecycle GetBotLifecycle()\n{\n    return RGBotLifecycle.PERSISTENT;\n}\n\n// flags for clicking the buttons we need to click to start the game\nprivate readonly Dictionary<string, bool> _stateFlags = new()\n{\n    { "SelectGameModeButton", false },\n    { "ChooseArcherButton", false },\n    { "StartGameButton", false }\n};\n\n/** \n * Click buttons to get us from the Main Menu into the dungeon.\n * Once we enter the dungeon, this Bot has completed its tasks.\n */\npublic override void ProcessTick(RG rgObject)\n{\n    if(rgObject.SceneName == "MainMenu")\n    {\n        var selectGameModeButton = rgObject.GetInteractableButton("SelectGameModeButton");\n        if (selectGameModeButton != null && !_stateFlags["SelectGameModeButton"])\n        {\n            rgObject.PerformAction(new RGActionRequest_ClickButton(selectGameModeButton.id) );\n            _stateFlags["SelectGameModeButton"] = true;\n            return;\n        }\n\n        var chooseArcherButton = rgObject.GetInteractableButton("ChooseArcherButton");\n        if (chooseArcherButton != null && _stateFlags["SelectGameModeButton"] && !_stateFlags["ChooseArcherButton"])\n        {\n            rgObject.PerformAction(new RGActionRequest_ClickButton(chooseArcherButton.id));\n            _stateFlags["ChooseArcherButton"] = true;\n            return;\n        }\n\n        var startGameButton = rgObject.GetInteractableButton("StartGameButton");\n        if (startGameButton != null && _stateFlags["ChooseArcherButton"] && !_stateFlags["StartGameButton"])\n        {\n            rgObject.PerformAction(new RGActionRequest_ClickButton(startGameButton.id));\n            _stateFlags["StartGameButton"] = true;\n            return;\n        }\n\n    } else {\n        rgObject.Complete();\n    }\n}\n')))))}h.isMDXComponent=!0}}]);