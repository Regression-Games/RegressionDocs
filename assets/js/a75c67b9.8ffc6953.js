"use strict";(self.webpackChunkregression_docs=self.webpackChunkregression_docs||[]).push([[7425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),p=n(7392),d=n(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,p]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),k=(()=>{const e=s??u;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),g(e)}),[p,g,i]),tabValues:i}}var k=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=p[n].value;a!==o&&(u(t),s(a))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:c,onClick:m},l,{className:(0,i.Z)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(f,(0,a.Z)({},e,t)))}function v(e){const t=(0,k.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},7299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={sidebar_label:"Utilities for C# Bots"},s="Utilities for C# Bots",p={unversionedId:"studios/unity/unity-sdk/creating-bots/csharp/utilities",id:"studios/unity/unity-sdk/creating-bots/csharp/utilities",title:"Utilities for C# Bots",description:"Bots",source:"@site/docs/studios/unity/unity-sdk/creating-bots/csharp/utilities.mdx",sourceDirName:"studios/unity/unity-sdk/creating-bots/csharp",slug:"/studios/unity/unity-sdk/creating-bots/csharp/utilities",permalink:"/studios/unity/unity-sdk/creating-bots/csharp/utilities",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Utilities for C# Bots"},sidebar:"studiosSidebar",previous:{title:"Validation Bots",permalink:"/studios/unity/unity-sdk/creating-bots/csharp/validation-bots"},next:{title:"Configuration",permalink:"/studios/unity/unity-sdk/creating-bots/javascript/configuration"}},d={},u=[{value:"RGGizmos",id:"rggizmos",level:2},{value:"Drawing and Removing Lines",id:"drawing-and-removing-lines",level:3},{value:"Drawing and Removing Spheres",id:"drawing-and-removing-spheres",level:3},{value:"Drawing Text",id:"drawing-text",level:3},{value:"Putting it all together",id:"putting-it-all-together",level:3}],m={toc:u},c="wrapper";function h(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"utilities-for-c-bots"},"Utilities for C# Bots"),(0,r.kt)("h2",{id:"rggizmos"},"RGGizmos"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RGGizmos")," is a utility for drawing specific Gizmos and debug information within your Unity scene. It is\nprimarily a wrapper around Unity's built-in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/ScriptReference/Gizmos.html"},"Gizmos feature"),",\nbut it also provides some additional functionality around text drawing and rendering Gizmos from the bot threads.\nThe RGGizmos library currently supports three main features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drawing lines betweens entities and positions"),(0,r.kt)("li",{parentName:"ul"},"Drawing spheres at entities and positions"),(0,r.kt)("li",{parentName:"ul"},"Rendering billboard text above an entity ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Skip to the end of the RGGizmos section to see a video of these in action.")),(0,r.kt)("p",null,"All methods below can be accessed via the ",(0,r.kt)("inlineCode",{parentName:"p"},"RGGizmos")," variable in your ",(0,r.kt)("inlineCode",{parentName:"p"},"ProcessTick(RG rgObject)")," method that is\ndefined in your bot code (see the ",(0,r.kt)("a",{parentName:"p",href:"./playtest-bots"},"Playtest Bots documentation")," for more on implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"ProcessTick"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public override void ProcessTick(RG rgObject)\n{\n    ...\n    RGGizmos.CreateText(thisAgent.id, "Hello, World!");\n    ...\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You must have Gizmos enabled to see these features. While in Play mode, you can turn on the Gizmos in the top-right of\nthe editor:"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{alt:"Gizmos",src:n(2235).Z,width:"2092",height:"772"}))),(0,r.kt)("h3",{id:"drawing-and-removing-lines"},"Drawing and Removing Lines"),(0,r.kt)("p",null,"Drawing a line is as simple as calling ",(0,r.kt)("inlineCode",{parentName:"p"},"RGGizmos.CreateLine()")," with the appropriate parameters. There are four overloaded\nvariants of this function, which allows you to indicate an combination entity/position start and ending locations for the\nline. A color and name is also indicated (the name is used to delete specific lines later)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateLine(int startEntityId, Vector3 endPosition, Color color, string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateLine(Vector3 startPosition, int endEntityId, Color color, string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateLine(int startEntityId, int endEntityId, Color color, string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateLine(Vector3 startPosition, Vector3 endPosition, Color color, string name)"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startEntityId / startPosition")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int / Vector3")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity")," to start the line, or a position within the scene to start the line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endEntityId / endPosition")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int / Vector3")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity")," to end the line, or a position within the scene to end the line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"color")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Color")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The color of the line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the line. Used to remove the line later.")))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"create_line_entity_entity",label:"Line from entity to entity",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nvar nextWaypoint = rgObject.FindEntities("waypoint")[0];\nRGGizmos.CreateLine(thisPlayer.id, nextWaypoint.id, Color.green, "Next Waypoint Line");\n'))),(0,r.kt)(l.Z,{value:"create_line_entity_position",label:"Line from entity to position",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nvar somePoint = new Vector3(10, 20, 30);\nRGGizmos.CreateLine(thisPlayer.id, somePoint, Color.blue, "Some location line");\n'))),(0,r.kt)(l.Z,{value:"create_line_position_entity",label:"Line from position to entity",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nvar somePoint = new Vector3(10, 20, 30);\nRGGizmos.CreateLine(somePoint, thisPlayer.id, Color.green, "A cool line");\n'))),(0,r.kt)(l.Z,{value:"create_line_position_position",label:"Line from position to position",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var pointOne = new Vector3(0, 0, 0);\nvar pointTwo = new Vector3(10, 20, 30);\nRGGizmos.CreateLine(pointOne, pointTwo, Color.green, "Points of interest");\n')))),(0,r.kt)("p",null,"You can then destroy these lines via their names, or simply destroy all lines."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroyLine(string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroyAllLines()"))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"delete_a_line",label:"Delete a specific line",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nvar nextWaypoint = rgObject.FindEntities("waypoint")[0];\nRGGizmos.CreateLine(thisPlayer.id, nextWaypoint.id, Color.green, "Next Waypoint Line");\n\n// Later on...\nRGGizmos.DestroyLine("Next Waypoint Line");\n'))),(0,r.kt)(l.Z,{value:"delete_all_lines",label:"Delete all lines",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nvar nextWaypoint = rgObject.FindEntities("waypoint")[0];\nRGGizmos.CreateLine(thisPlayer.id, nextWaypoint.id, Color.green, "Next Waypoint Line");\n\n// Later on...\nRGGizmos.DestroyAllLines();\n')))),(0,r.kt)("h3",{id:"drawing-and-removing-spheres"},"Drawing and Removing Spheres"),(0,r.kt)("p",null,"Drawing a sphere is as simple as calling ",(0,r.kt)("inlineCode",{parentName:"p"},"RGGizmos.CreateSphere()")," with the appropriate parameters. There are two overloaded\nvariants of this function, which allows you to indicate an entity or position to draw the sphere at. A color, radius, and name\nis also indicated (the name is used to delete specific spheres later)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateSphere(int entityId, Color color, float size, bool isWireframe, string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateSphere(Vector3 position, Color color, float size, bool isWireframe, string name)"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entityId / position")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int / Vector3")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity")," to draw the sphere at, or a position within the scene to draw the sphere at.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"color")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Color")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The color of the sphere.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The size of the sphere.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isWireframe")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether or not the sphere is wireframe (if false, it will be solid).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the sphere. Used to remove the sphere later.")))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"create_sphere_entity",label:"Sphere at entity",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateSphere(thisPlayer.id, Color.green, 0.5f, true, "Player Sphere");\n'))),(0,r.kt)(l.Z,{value:"create_sphere_position",label:"Sphere at position",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var somePoint = new Vector3(10, 20, 30);\nRGGizmos.CreateSphere(somePoint, Color.blue, 0.5f, true, "Some location sphere");\n')))),(0,r.kt)("p",null,"You can then destroy these spheres via their names, or simply destroy all spheres."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroySphere(string name)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroyAllSpheres()"))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"delete_a_sphere",label:"Delete a specific sphere",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateSphere(thisPlayer.id, Color.green, 0.5f, true, "Player Sphere");\n\n// Later on...\nRGGizmos.DestroySphere("Player Sphere");\n'))),(0,r.kt)(l.Z,{value:"delete_all_spheres",label:"Delete all spheres",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateSphere(thisPlayer.id, Color.green, 0.5f, true, "Player Sphere");\n\n// Later on...\nRGGizmos.DestroyAllSpheres();\n')))),(0,r.kt)("h3",{id:"drawing-text"},"Drawing Text"),(0,r.kt)("p",null,"Drawing text is as simple as calling ",(0,r.kt)("inlineCode",{parentName:"p"},"RGGizmos.CreateText()")," with the appropriate parameters. It allows you to draw\ntext above an entity which always faces the camera."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void CreateText(int entityId, string text, float yOffset = 2.0f)"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entityId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"RGStateEntity")," to draw the text above.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The text to draw above the entity.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"yOffset")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"optional"),(0,r.kt)("td",{parentName:"tr",align:null},"The offset in the y direction to draw the text above the entity. Defaults to 2.")))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"create_text",label:"Text above entity",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateText(thisPlayer.id, "Hello, World!");\n'))),(0,r.kt)(l.Z,{value:"create_text_offset",label:"Text above entity (with offset)",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateText(thisPlayer.id, "Hello, World, but higher!", 5.0f);\n')))),(0,r.kt)("p",null,"You can then destroy this text via the entity id, or by deleting all of the texts drawn so far."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroyText(int entityId)")),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"public void DestroyAllTexts()"))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"delete_text",label:"Delete text",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateText(thisPlayer.id, "Hello, World!");\n\n// Later on...\nRGGizmos.DestroyText(thisPlayer.id);\n'))),(0,r.kt)(l.Z,{value:"delete_all_text",label:"Delete all text",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var thisPlayer = rgObject.FindPlayers()[0];\nRGGizmos.CreateText(thisPlayer.id, "Hello, World!");\n\n// Later on...\nRGGizmos.DestroyAllTexts();\n')))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Because these billboard text objects are not using the Unity Gizmos framework, they will still be present in the scene\nif you create them and then turn off Gizmos. If you want to remove them, you must call ",(0,r.kt)("inlineCode",{parentName:"p"},"DestroyAllTexts()"),".")),(0,r.kt)("h3",{id:"putting-it-all-together"},"Putting it all together"),(0,r.kt)("p",null,"Let's put this all together! Here is a snippet of code from the a bot written for Unity's\n",(0,r.kt)("a",{parentName:"p",href:"https://learn.unity.com/project/karting-template"},"Kart Racer sample"),". This demonstrates creating lines, spheres, text,\nand removing some of these elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// Inside of processTick()\n\ncounter++; // We keep a counter so we can keep track of the gizmos we draw\nvar thisAgent = rgObject.FindPlayers()[0];\nvar nextWaypoint = ...; // We grab the RGStateEntity for the next waypoint our racer should follow\nvar distance = ...; // Calculate some parameters we want to debug and show\n\nRGGizmos.CreateLine(thisAgent.id, nextWaypoint.position, Color.green, "Next Waypoint Line" + counter);\nRGGizmos.CreateSphere(nextWaypoint.position,  Color.red, 0.3f, true, "Next Waypoint Spot" + counter);\nRGGizmos.CreateText(thisAgent.id, $"Distance: {distance}");\n\n// Only keep the four latest lines and spheres\nif (counter > 4)\n{\n    RGGizmos.DestroyLine("Next Waypoint Line" + (counter - 4));\n    RGGizmos.DestroySphere("Next Waypoint Spot" + (counter - 4));\n}\n')),(0,r.kt)("div",{style:{position:"relative",paddingBottom:"63.454759106933025%",height:0}},(0,r.kt)("iframe",{src:"https://www.loom.com/embed/a4a7692ac2704e148edf988600f6cbe5?sid=e8a74c95-0d15-4ac4-b432-8d896424b713",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})))}h.isMDXComponent=!0},2235:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/editor-aeaed69a20991c0cccef751e30973d82.png"}}]);